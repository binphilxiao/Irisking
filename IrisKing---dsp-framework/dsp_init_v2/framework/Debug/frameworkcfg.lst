TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    1

       1                    ;;   Do *not* directly modify this file.  It was   
       2                    ;;   generated by the Configuration Tool; any 
       3                    ;;   changes risk being overwritten.               
       4                    
       5                    ;; INPUT framework.cdb
       6                    
       7                    ;; CONFIGURATION/VERSION INFORMATION
       8                            .asg "Wed Oct 24 15:33:21 2007", VERS$DATE
       9                    
      10                    ;; PROLOGUE
      11                            .include frameworkcfg.h62
      12                            .copy confbeg.s62
 B     1                    ;
 B     2                    ;  Copyright 2003 by Texas Instruments Incorporated.
 B     3                    ;  All rights reserved. Property of Texas Instruments Incorporated.
 B     4                    ;  Restricted rights to use, duplicate or disclose this code are
 B     5                    ;  granted through contract.
 B     6                    ;  
 B     7                    ;
 B     8                    ; "@(#) DSP/BIOS 4.90.270 01-13-05 (barracuda-o07)"
 B     9                    ;
 B    10                    ;  ======== confbeg.s62 ========
 B    11                    ;  The statements in this file are inserted at the beginning of 
 B    12                    ;  every BIOS configuration file.
 B    13                    ;
 B    14                    
 B    15                    
      13                    
      14                    ;; TYPE HEADERS
      15                            .include gbl.h62
      16                            .include mem.h62
      17                            .include obj.h62
      18                            .include buf.h62
      19                            .include clk.h62
      20                            .include prd.h62
      21                            .include rtdx.h62
      22                            .include hst.h62
      23                            .include hwi.h62
      24                            .include swi.h62
      25                            .include tsk.h62
      26                            .include idl.h62
      27                            .include isrc.h62
      28                            .include log.h62
      29                            .include pip.h62
 +   636                    
      30                            .include sem.h62
      31                            .include mbx.h62
      32                            .include que.h62
      33                            .include lck.h62
      34                            .include sio.h62
      35                            .include sts.h62
      36                            .include sys.h62
 +   117                        
      37                            .include gio.h62
 +   132                        
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    2

      38                            .include dev.h62
      39                            .include udev.h62
      40                            .include dgn.h62
 +   215                    
      41                            .include dhl.h62
 +   197                    
      42                            .include dpi.h62
      43                            .include hook.h62
 +   225                    
      44                            .include dio.h62
      45                    
      46                    ;; TYPE ATTRIBUTES
      47          00000001  MEM$NUMOF           .set 1
      48          00000000  MEM$SETOF           .set 00H
      49          00000000  OBJ$NUMOF           .set 0
      50          00000000  OBJ$SETOF           .set 00H
      51          00000000  BUF$NUMOF           .set 0
      52          00000000  BUF$SETOF           .set 00H
      53          00000001  CLK$NUMOF           .set 1
      54          00000000  CLK$SETOF           .set 00H
      55          00000000  PRD$NUMOF           .set 0
      56          00000000  PRD$SETOF           .set 00H
      57          00000000  RTDX$NUMOF          .set 0
      58          00000000  RTDX$SETOF          .set 00H
      59          00000000  HST$NUMOF           .set 0
      60          00000000  HST$SETOF           .set 00H
      61          00000010  HWI$NUMOF           .set 16
      62          0000FFFF  HWI$SETOF           .set 0ffffH
      63          00000001  SWI$NUMOF           .set 1
      64          00000000  SWI$SETOF           .set 00H
      65          00000001  TSK$NUMOF           .set 1
      66          00000000  TSK$SETOF           .set 00H
      67          00000000  IDL$NUMOF           .set 0
      68          00000000  IDL$SETOF           .set 00H
      69          00000000  ISRC$NUMOF          .set 0
      70          00000000  ISRC$SETOF          .set 00H
      71          00000002  LOG$NUMOF           .set 2
      72          00000000  LOG$SETOF           .set 00H
      73          00000000  PIP$NUMOF           .set 0
      74          00000000  PIP$SETOF           .set 00H
      75          00000000  SEM$NUMOF           .set 0
      76          00000000  SEM$SETOF           .set 00H
      77          00000000  MBX$NUMOF           .set 0
      78          00000000  MBX$SETOF           .set 00H
      79          00000000  QUE$NUMOF           .set 0
      80          00000000  QUE$SETOF           .set 00H
      81          00000000  LCK$NUMOF           .set 0
      82          00000000  LCK$SETOF           .set 00H
      83          00000000  SIO$NUMOF           .set 0
      84          00000000  SIO$SETOF           .set 00H
      85          00000005  STS$NUMOF           .set 5
      86          00000000  STS$SETOF           .set 00H
      87          00000000  DEV$NUMOF           .set 0
      88          00000000  DEV$SETOF           .set 00H
      89          00000000  UDEV$NUMOF          .set 0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    3

      90          00000000  UDEV$SETOF          .set 00H
      91          00000000  DGN$NUMOF           .set 0
      92          00000000  DGN$SETOF           .set 00H
      93          00000000  DHL$NUMOF           .set 0
      94          00000000  DHL$SETOF           .set 00H
      95          00000000  DPI$NUMOF           .set 0
      96          00000000  DPI$SETOF           .set 00H
      97          00000000  HOOK$NUMOF          .set 0
      98          00000000  HOOK$SETOF          .set 00H
      99          00000000  DIO$NUMOF           .set 0
     100          00000000  DIO$SETOF           .set 00H
     101                    
     102                    ;; module GBL (ROM, BIGENDIAN, USERINIT, USERINITFXN, ENABLEINST, CACHE, L2CONFIGURE, L2MODE, L2PRIORI
     103                            .global GBL$                     ; == 1
     104                            .global GBL_ROM                  ; frameworkcfg.h62
     105                            .global GBL_BIGENDIAN            ; frameworkcfg.h62
     106                            .global GBL_USERINIT             ; frameworkcfg.h62
     107                            .global GBL_USERINITFXN          ; frameworkcfg.cmd
     108                            .global GBL_ENABLEINST           ; frameworkcfg.h62
     109                            .global GBL_CACHE                ; frameworkcfg.h62
     110                            .global GBL_L2CONFIGURE          ; frameworkcfg.h62
     111                            .global GBL_L2MODE               ; frameworkcfg.h62
     112                            .global GBL_L2PRIORITY           ; frameworkcfg.h62
     113                            .global GBL_L2MARMASK            ; frameworkcfg.h62
     114                            .global GBL_SUPPORTCSL           ; frameworkcfg.h62
     115                            .global GBL_TRCMASKVALUE         ; frameworkcfg.h62
     116                            .global GBL_CALLCSLCFGINIT       ; frameworkcfg.h62
     117                            .global GBL_C641XL2PRIORITY      ; frameworkcfg.h62
     118                            .global GBL_L2MARMASK1           ; frameworkcfg.h62
     119                            .global GBL_L2MARMASK2           ; frameworkcfg.h62
     120                            .global GBL_L2MARMASK3           ; frameworkcfg.h62
     121                            .global GBL_L2MARMASK4           ; frameworkcfg.h62
     122                            .global GBL_L2MARMASK5           ; frameworkcfg.h62
     123                            .global GBL_L2CONFIGALLOC        ; frameworkcfg.h62
     124                            .global GBL_L2ALLOC              ; frameworkcfg.h62
     125                    
     126                    ;; module MEM (gNumHeap, SEGZERO, MALLOCSEG)
     127                            .global MEM$                     ; == 1
     128                            .global MEM_gNumHeap             ; frameworkcfg.h62
     129                            .global MEM_SEGZERO              ; frameworkcfg.cmd
     130                            .global MEM_MALLOCSEG            ; frameworkcfg.cmd
     131                    
     132                    ;; module OBJ ()
     133                            .global OBJ$                     ; == 0
     134                    
     135                    ;; module BUF (ENABLED)
     136                            .global BUF$                     ; == 0
     137                            .global BUF_ENABLED              ; frameworkcfg.h62
     138                    
     139                    ;; module CLK (INTBIT, REGS, TIMERNUM, USETIMER, TCR, TDDR, TDDRHIGH, PRD, PRDHIGH, COUNTSPMS, COUNTSP
     140                            .global CLK$                     ; == 1
     141                            .global CLK_INTBIT               ; frameworkcfg.h62
     142                            .global CLK_REGS                 ; frameworkcfg.h62
     143                            .global CLK_TIMERNUM             ; frameworkcfg.h62
     144                            .global CLK_USETIMER             ; frameworkcfg.h62
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    4

     145                            .global CLK_TCR                  ; frameworkcfg.h62
     146                            .global CLK_TDDR                 ; frameworkcfg.h62
     147                            .global CLK_TDDRHIGH             ; frameworkcfg.h62
     148                            .global CLK_PRD                  ; frameworkcfg.h62
     149                            .global CLK_PRDHIGH              ; frameworkcfg.h62
     150                            .global CLK_COUNTSPMS            ; frameworkcfg.h62
     151                            .global CLK_COUNTSPMSHIGH        ; frameworkcfg.h62
     152                            .global CLK_TIMEFXN              ; frameworkcfg.cmd
     153                            .global CLK_HOOKFXN              ; frameworkcfg.cmd
     154                    
     155                    ;; module PRD (SCALAR, THOOKFXN)
     156                            .global PRD$                     ; == 1
     157                            .global PRD_SCALAR               ; frameworkcfg.h62
     158                            .global PRD_THOOKFXN             ; frameworkcfg.cmd
     159                    
     160                    ;; module RTDX (USERTDX, USERTEXECUTION, DATAMEMSEG, BUFMEMSIZE)
     161                            .global RTDX$                    ; == 1
     162                            .global RTDX_USERTDX             ; frameworkcfg.h62
     163                            .global RTDX_USERTEXECUTION      ; frameworkcfg.h62
     164                            .global RTDX_DATAMEMSEG          ; frameworkcfg.cmd
     165                            .global RTDX_BUFMEMSIZE          ; frameworkcfg.h62
     166                    
     167                    ;; module HST (RTDX, DSM, NONE, MAXFRAMESET, MAXFRAMEALLOWED, DSMBUFSEG, DSMMEMSIZE)
     168                            .global HST$                     ; == 0
     169                            .global HST_RTDX                 ; frameworkcfg.h62
     170                            .global HST_DSM                  ; frameworkcfg.h62
     171                            .global HST_NONE                 ; frameworkcfg.h62
     172                            .global HST_MAXFRAMESET          ; frameworkcfg.h62
     173                            .global HST_MAXFRAMEALLOWED      ; frameworkcfg.h62
     174                            .global HST_DSMBUFSEG            ; frameworkcfg.cmd
     175                            .global HST_DSMMEMSIZE           ; frameworkcfg.h62
     176                    
     177                    ;; module HWI (ZEROTAB, GENERATE_RESET_VEC, POLARITYMASK, INTRMULTLOW, INTRMULTHIGH)
     178                            .global HWI$                     ; == 1
     179                            .global HWI_ZEROTAB              ; frameworkcfg.h62
     180                            .global HWI_GENERATE_RESET_VEC   ; frameworkcfg.h62
     181                            .global HWI_POLARITYMASK         ; frameworkcfg.h62
     182                            .global HWI_INTRMULTLOW          ; frameworkcfg.h62
     183                            .global HWI_INTRMULTHIGH         ; frameworkcfg.h62
     184                    
     185                    ;; module SWI (EHOOKFXN, IHOOKFXN, EXECFXN, RUNFXN)
     186                            .global SWI$                     ; == 1
     187                            .global SWI_EHOOKFXN             ; frameworkcfg.cmd
     188                            .global SWI_IHOOKFXN             ; frameworkcfg.cmd
     189                            .global SWI_EXECFXN              ; frameworkcfg.cmd
     190                            .global SWI_RUNFXN               ; frameworkcfg.cmd
     191                    
     192                    ;; module TSK (STACKSIZE, STACKSEG, PRIORITY, VCREATEFXN, VDELETEFXN, VEXITFXN, SWITCHFXN, READYFXN, N
     193                            .global TSK$                     ; == 1
     194                            .global TSK_STACKSIZE            ; frameworkcfg.h62
     195                            .global TSK_STACKSEG             ; frameworkcfg.cmd
     196                            .global TSK_PRIORITY             ; frameworkcfg.h62
     197                            .global TSK_VCREATEFXN           ; frameworkcfg.cmd
     198                            .global TSK_VDELETEFXN           ; frameworkcfg.cmd
     199                            .global TSK_VEXITFXN             ; frameworkcfg.cmd
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    5

     200                            .global TSK_SWITCHFXN            ; frameworkcfg.h62
     201                            .global TSK_READYFXN             ; frameworkcfg.h62
     202                            .global TSK_NUM_HOOKS            ; frameworkcfg.h62
     203                    
     204                    ;; module IDL (USECLKIDLTIME, CALIBRFXN)
     205                            .global IDL$                     ; == 0
     206                            .global IDL_USECLKIDLTIME        ; frameworkcfg.h62
     207                            .global IDL_CALIBRFXN            ; frameworkcfg.cmd
     208                    
     209                    ;; module ISRC ()
     210                            .global ISRC$                    ; == 1
     211                    
     212                    ;; module LOG (ENABLED)
     213                            .global LOG$                     ; == 1
     214                            .global LOG_ENABLED              ; frameworkcfg.h62
     215                    
     216                    ;; module PIP (gNumEmbed, gNextId)
     217                            .global PIP$                     ; == 0
     218                            .global PIP_gNumEmbed            ; frameworkcfg.h62
     219                            .global PIP_gNextId              ; frameworkcfg.h62
     220                    
     221                    ;; module SEM ()
     222                            .global SEM$                     ; == 0
     223                    
     224                    ;; module MBX ()
     225                            .global MBX$                     ; == 0
     226                    
     227                    ;; module QUE ()
     228                            .global QUE$                     ; == 1
     229                    
     230                    ;; module LCK ()
     231                            .global LCK$                     ; == 1
     232                    
     233                    ;; module SIO ()
     234                            .global SIO$                     ; == 0
     235                    
     236                    ;; module STS ()
     237                            .global STS$                     ; == 1
     238                    
     239                    ;; module SYS (ABORTFXN, ERRORFXN, EXITFXN, PUTCFXN)
     240                            .global SYS$                     ; == 1
     241                            .global SYS_ABORTFXN             ; frameworkcfg.cmd
     242                            .global SYS_ERRORFXN             ; frameworkcfg.cmd
     243                            .global SYS_EXITFXN              ; frameworkcfg.cmd
     244                            .global SYS_PUTCFXN              ; frameworkcfg.cmd
     245                    
     246                    ;; module GIO (CREATEFXN, DELETEFXN, PENDFXN, POSTFXN)
     247                            .global GIO$                     ; == 1
     248                            .global GIO_CREATEFXN            ; frameworkcfg.cmd
     249                            .global GIO_DELETEFXN            ; frameworkcfg.cmd
     250                            .global GIO_PENDFXN              ; frameworkcfg.cmd
     251                            .global GIO_POSTFXN              ; frameworkcfg.cmd
     252                    
     253                    ;; module DEV ()
     254                            .global DEV$                     ; == 0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    6

     255                    
     256                    ;; module UDEV ()
     257                            .global UDEV$                    ; == 0
     258                    
     259                    ;; module DGN ()
     260                            .global DGN$                     ; == 0
     261                    
     262                    ;; module DHL (gChannelsAvailable)
     263                            .global DHL$                     ; == 0
     264                            .global DHL_gChannelsAvailable   ; frameworkcfg.h62
     265                    
     266                    ;; module DPI ()
     267                            .global DPI$                     ; == 0
     268                    
     269                    ;; module HOOK (KNLID)
     270                            .global HOOK$                    ; == 0
     271                            .global HOOK_KNLID               ; frameworkcfg.h62
     272                    
     273                    ;; module DIO (STATIC, NUMTSKBASE, NUMSWIBASE)
     274                            .global DIO$                     ; == 0
     275                            .global DIO_STATIC               ; frameworkcfg.h62
     276                            .global DIO_NUMTSKBASE           ; frameworkcfg.h62
     277                            .global DIO_NUMSWIBASE           ; frameworkcfg.h62
     278                    
     279                    ;; MODULE CONFIGURATION
     280                    
     281                    ;; ======== GBL_config ========
     282                            .asg 00H, _ROM
     283                            .asg 00H, _BIGENDIAN
     284                            .asg 01H, _USERINIT
     285                            .asg _dm642_init, _USERINITFXN
     286                            .asg 00H, _ENABLEINST
     287                            .asg 00H, _CACHE
     288                            .asg 00H, _L2CONFIGURE
     289                            .asg 00H, _L2MODE
     290                            .asg 00H, _L2PRIORITY
     291                            .asg 00H, _L2MARMASK
     292                            .asg 01H, _SUPPORTCSL
     293                            .asg 04000H, _TRCMASKVALUE
     294                            .asg 01H, _CALLCSLCFGINIT
     295                            .asg 00H, _C641XL2PRIORITY
     296                            .asg 00H, _L2MARMASK1
     297                            .asg 00H, _L2MARMASK2
     298                            .asg 00H, _L2MARMASK3
     299                            .asg 00H, _L2MARMASK4
     300                            .asg 00H, _L2MARMASK5
     301                            .asg 00H, _L2CONFIGALLOC
     302                            .asg 02226H, _L2ALLOC
     303 00000000                   GBL_config  _ROM, _BIGENDIAN, _USERINIT, _USERINITFXN, _ENABLEINST, _CACHE, _L2CONFIGURE, _L2M
1                                   
1                                   ; reference special symbol GBL_boot defined in BIOS boot file to make sure
1                                   ; we are linking correct boot file (workaround for SDSsq24217)
1                                   .ref GBL_boot
1                           
1                                   .def TRC_cinit
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    7

1                                   .def _TRC_R_mask
1                                   .asg    _dm642_init, USERINITFXN        ; used by GBL_init
1                           
1                                   ;
1                                   ; print a warning message if project build options do not match
1                                   ; global configuration options.
1                                   ;
1                                   .if .BIG_ENDIAN
1                                       .if (GBL_BIGENDIAN == 0)
1                                           .emsg "Project build options do not match Global configuration settings.  Compiler opt
1                                       .endif
1                                   .else
1                                       .if (GBL_BIGENDIAN == 1)
1                                           .emsg "Project build options do not match Global configuration settings.  Compiler opt
1                                       .endif
1                                   .endif
1                           
1                                   ; initialize 'gblinit' variable, used in GBL_init
1        00000000           gblinit .sect ".gblinit"
1                           
1                                   ;
1                                   ; fill stack with '0xc0ffee'
1                                   ;
1                                   ; Don't overwrite the bottom 16 words to avoid trashing
1                                   ; valid stack data. (Only one of these words contains
1                                   ; valid data, but just to be safe we leave 16 untouched).
1                                   ;
1                                   ; (stacksize / wordsize) since size is in words
1                                   ;
1        00000000 00000000%         .word ( (GBL_stackend-GBL_stackbeg+1) / STD_TARGWORDMAUS ) - 16 ; nwords
1        00000004 00000000!         .word GBL_stackbeg                      ; addr
1        00000008 00C0FFEE          .word 0xc0ffee                          ; value
1                           
1                                   ;
1                                   ;  DEFINE A SPECIAL WORD THAT WILL BE COPIED TO TRC_R_mask
1                                   ;  AT PROGRAM INITIALIZATION, INSTEAD OF PUTTING TRC_cinit
1                                   ;  INTO THE .cinit SECTION.
1                                   ;  THIS WAY WE CAN WRITE TO BOTH TRC_R_mask AND TRC_cinit
1                                   ;  AND APPLICATION PROGRAMS CAN STILL USE THE .cinit SECTION
1                                   ;  AFTER INITIALIZATION IS DONE.
1                                   ;
1        00000000                   .sect ".trcdata"
1                           
1        00000000           TRC_cinit:
1                                   .align 4
1        00000000 00004000          .word GBL_TRCMASKVALUE          ; defined by configuration tool
1                           
1                                   ; We need to initialize TRC_R_mask, but can't use a .cinit
1                                   ; record, so it can't go into .bss as it was before since
1                                   ; the initialization below causes the whole .bss section to
1                                   ; become initialized and filled.
1                                   ;
1        00000004           TRC_R_mask:
1                                   .align 4
1        00000004 00004000          .word GBL_TRCMASKVALUE          ; defined by configuration tool
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    8

1                           
1                 00000004+ _TRC_R_mask     .set    TRC_R_mask
1                           
1        00000008           GBL_initdone
1        00000008                   .sect ".trcdata"
1        00000008 00000000          .word 0
1                           
     304                    
     305                    ;; ======== MEM_config ========
     306                            .asg 01H, _gNumHeap
     307                            .asg ISRAM, _SEGZERO
     308                            .asg ISRAM, _MALLOCSEG
     309 0000000c                   MEM_config  _gNumHeap, _SEGZERO, _MALLOCSEG
1                           
1                               ;
1                               ; Proceed only if there are heaps declared.
1                               ;
1                               .if 01H
1                                   .global _MEM        ; Pointer to configuration parameters
1                                   .global _MEM_memtab        ; Array of memory heaps
1                                   .global __MEM_NUMSEGMENTS    ; Number of memory heaps
1                           
1                                   ;
1                                   ; The following two .bss/.cinit sets make configured values readable
1                                   ; in the established SPOX manner, e.g., MEM->MALLOCSEG.
1                                   ;
1        00000000           MEM_config    .usect    ".mem", 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        00000000                   .sect ".cinit"
1                                   .align STD_TARGALIGN
1        00000000 00000004          .word 1 * STD_TARGWORDMAUS
1        00000004 00000000-         .word MEM_config   
1                           
1                                   ;; If MALLOCSEG = MEM_NULL then put in an err value in for MALLOCSEG$idx
1                                   .if ($symcmp("ISRAM", "MEM_NULL") == 0)
1                                       .word -1
1                                   .else
1        00000008 00000000              .word ISRAM$idx
1                                   .endif
1                           
1        0000000c                   .sect ".cinit"
1                                   .align STD_TARGALIGN
1        00000010 00000004          .word 1 * STD_TARGWORDMAUS
1        00000014 00000000!         .word _MEM   
1        00000018 00000000-         .word MEM_config
1                           
1                                   ;
1                                   ; This declares space for the array of configured heaps, the .cinit
1                                   ; parts are defined for each task in MEM_Obj.  This space has to be
1                                   ; reserved NOW, before the MEM_Obj macro is called and the elements
1                                   ; of the table are defined.
1                                   ;
1        00000000                   .bss _MEM_memtab, 01H * 3 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                   ;
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE    9

1                                   ; Set MEM_tabIdx to 1 if _segzero is set to a MEM segment other then
1                                   ; MEM_NULL because the MEM segment will in the 0th place.
1                                   ; If _segzero is MEM_NULL then set MEM_tabIdx to 0 since MEM_NULL is
1                                   ; only a place holder and not a real MEM segment with a heap.
1                                   ;
1                                   .if $symcmp("MEM_NULL", "ISRAM") == 0
1                                       .asg    0, MEM_tabIdx        ; Index into MEM_memtab
1                                   .else
1                                       .asg    1, MEM_tabIdx        ; Index into MEM_memtab
1                                   .endif
1                           
1                               ;
1                               ; _MEM_memtab needs to be set to zero if no heap are defined
1                               ;
1                               .else
1                               .global _MEM_memtab
1                           _MEM_memtab .set 00h
1                               .endif        ; .if :_gNumHeap:
1                           
     310                    
     311                    ;; ======== OBJ_config ========
     312 0000001c                   OBJ_config
1                           
1                           
1                                   .asg    "_OBJ_table + 0 * STD_TARGWORDMAUS",    OBJ_TAB_SEM
1                                   .asg    "_OBJ_table + 2 * STD_TARGWORDMAUS",    OBJ_TAB_SWI
1                                   .asg    "_OBJ_table + 4 * STD_TARGWORDMAUS",    OBJ_TAB_TSK
1                                   .asg    "_OBJ_table + 6 * STD_TARGWORDMAUS",    OBJ_TAB_MBX
1                                   .asg    "_OBJ_table + 8 * STD_TARGWORDMAUS",    OBJ_TAB_SIO
1                                   .asg    "_OBJ_table + 10 * STD_TARGWORDMAUS",   OBJ_TAB_DEV
1                                   .asg    "_OBJ_table + 12 * STD_TARGWORDMAUS",   OBJ_TAB_BUF
1                           
1                                   .asg _OBJ_table + 0 * STD_TARGWORDMAUS, OBJ_sem$next
1                                   .asg _OBJ_table + 2 * STD_TARGWORDMAUS, OBJ_swi$next
1                                   .asg _OBJ_table + 4 * STD_TARGWORDMAUS, OBJ_tsk$next
1                                   .asg _OBJ_table + 6 * STD_TARGWORDMAUS, OBJ_mbx$next
1                                   .asg _OBJ_table + 8 * STD_TARGWORDMAUS, OBJ_sio$next
1                                   .asg _OBJ_table + 10 * STD_TARGWORDMAUS,  OBJ_dev$next
1                                   .asg _OBJ_table + 12 * STD_TARGWORDMAUS,  OBJ_buf$next
1                           
1                                   .asg _OBJ_table + 0 * STD_TARGWORDMAUS, OBJ_sem$prev
1                                   .asg _OBJ_table + 2 * STD_TARGWORDMAUS, OBJ_swi$prev
1                                   .asg _OBJ_table + 4 * STD_TARGWORDMAUS, OBJ_tsk$prev
1                                   .asg _OBJ_table + 6 * STD_TARGWORDMAUS, OBJ_mbx$prev
1                                   .asg _OBJ_table + 8 * STD_TARGWORDMAUS, OBJ_sio$prev
1                                   .asg _OBJ_table + 10 * STD_TARGWORDMAUS, OBJ_dev$prev
1                                   .asg _OBJ_table + 12 * STD_TARGWORDMAUS, OBJ_buf$prev
1                           
1                                   .asg    1,      SEM$sernum
1                                   .asg    1,      SWI$sernum
1                                   .asg    1,      TSK$sernum
1                                   .asg    1,      MBX$sernum
1                                   .asg    1,      SIO$sernum
1                                   .asg    1,      DEV$sernum
1                                   .asg    1,      BUF$sernum
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   10

1                           
     313                    
     314                    ;; ======== BUF_config ========
     315                            .asg 01H, _ENABLED
     316 0000001c                   BUF_config  _ENABLED
     317                    
     318                    ;; ======== CLK_config ========
     319                            .asg 04000H, _INTBIT
     320                            .asg 01940000H, _REGS
     321                            .asg 00H, _TIMERNUM
     322                            .asg 01H, _USETIMER
     323                            .asg 020H, _TCR
     324                            .asg 00H, _TDDR
     325                            .asg 00H, _TDDRHIGH
     326                            .asg 0124f8H, _PRD
     327                            .asg 01H, _PRDHIGH
     328                            .asg 0124f8H, _COUNTSPMS
     329                            .asg 01H, _COUNTSPMSHIGH
     330                            .asg CLK_F_getshtime, _TIMEFXN
     331                            .asg HWI_F_dispatch, _HOOKFXN
     332 0000001c                   CLK_config  _INTBIT, _REGS, _TIMERNUM, _USETIMER, _TCR, _TDDR, _TDDRHIGH, _PRD, _PRDHIGH, _COU
1                           
1                                   ;
1                                   ; NOTE! BIOS and SPOX overlap still needs resolution
1                                   ;
1                                   
     333                    
     334                    ;; ======== PRD_config ========
     335                            .asg 04000H, _SCALAR
     336                            .asg _KNL_tick, _THOOKFXN
     337 0000001c                   PRD_config  _SCALAR, _THOOKFXN
1                                   ; only expand if the PRD module is configured by the user
1                                   .asg 0, PRD_swihandle
1                                   .if (PRD$ = 1)
1                                       .if (PRD$NUMOF > 0)
1                                           .if (SWI$ != 1)
1                                               .emsg "PRD objects require the configuration of SWI"
1                                               .mexit
1                                           .endif
1                                           .asg "PRD_swi", PRD_swihandle
1                                       .endif
1                                   .endif
1                                   
     338                    
     339                    ;; ======== RTDX_config ========
     340                            .asg 01H, _USERTDX
     341                            .asg 00H, _USERTEXECUTION
     342                            .asg ISRAM, _DATAMEMSEG
     343                            .asg 0408H, _BUFMEMSIZE
     344 0000001c                   RTDX_config  _USERTDX, _USERTEXECUTION, _DATAMEMSEG, _BUFMEMSIZE
1                                   .if(RTDX_USERTDX = 1)
1                                       .global _RTDX_Buffer, _RTDX_Buffer_Start, _RTDX_Buffer_End
1                           
1                                       ; reserve uninitialized space for RTDX buffer
1        00000000           _RTDX_Buffer    .usect ".rtdx_data", 0408H, STD_TARGWORDMAUS
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   11

1                           
1                                       ; define _RTDX_Buffer_Start
1        00000408           _RTDX_Buffer_Start  .usect ".rtdx_data", 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        0000001c                   .sect ".cinit"
1                                   .align STD_TARGALIGN
1        00000020 00000004          .field  1 * STD_TARGWORDMAUS
1        00000024 00000408-         .field  _RTDX_Buffer_Start
1        00000028 00000000-         .field  _RTDX_Buffer
1                                   
1                                       ; define _RTDX_Buffer_End 
1        0000040c           _RTDX_Buffer_End  .usect ".rtdx_data", 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        0000002c                   .sect ".cinit"
1                                   .align STD_TARGALIGN
1        00000030 00000004          .field  1 * STD_TARGWORDMAUS
1        00000034 0000040C-         .field  _RTDX_Buffer_End
1        00000038 00000404-         .field  _RTDX_Buffer + 0408H - (1 * STD_TARGWORDMAUS)
1                           
1                                   .endif
     345                    
     346                    ;; ======== HST_config ========
     347                            .asg 00H, _RTDX
     348                            .asg 00H, _DSM
     349                            .asg 01H, _NONE
     350                            .asg 00H, _MAXFRAMESET
     351                            .asg 0100H, _MAXFRAMEALLOWED
     352                            .asg ISRAM, _DSMBUFSEG
     353                            .asg 0400H, _DSMMEMSIZE
     354 0000003c                   HST_config  _RTDX, _DSM, _NONE, _MAXFRAMESET, _MAXFRAMEALLOWED, _DSMBUFSEG, _DSMMEMSIZE
1                                   .asg    0, HST$hstCount
1                                   .asg    0, chanId
1                           
1                                   .if(HST$ != 0)
1                                       LNK_config _dsm, _dsmbufseg, _dsmmemsize  ; do any reqd LNK config 
1                                   .endif
1                           
     355                    
     356                    ;; ======== HWI_config ========
     357                            .asg 00H, _ZEROTAB
     358                            .asg 00H, _GENERATE_RESET_VEC
     359                            .asg 00H, _POLARITYMASK
     360                            .asg 0250718a4H, _INTRMULTLOW
     361                            .asg 082039a3H, _INTRMULTHIGH
     362 0000003c                   HWI_config  _ZEROTAB, _GENERATE_RESET_VEC, _POLARITYMASK, _INTRMULTLOW, _INTRMULTHIGH
1                           
     363                    
     364                    ;; ======== SWI_config ========
     365                            .asg GBL_NULL, _EHOOKFXN
     366                            .asg GBL_NULL, _IHOOKFXN
     367                            .asg SWI_F_iexec, _EXECFXN
     368                            .asg SWI_F_run, _RUNFXN
     369 0000003c                   SWI_config  _EHOOKFXN, _IHOOKFXN, _EXECFXN, _RUNFXN
1                           
     370                    
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   12

     371                    ;; ======== TSK_config ========
     372                            .asg 0400H, _STACKSIZE
     373                            .asg MEM_NULL, _STACKSEG
     374                            .asg 01H, _PRIORITY
     375                            .asg _FXN_F_nop, _VCREATEFXN
     376                            .asg _FXN_F_nop, _VDELETEFXN
     377                            .asg _FXN_F_nop, _VEXITFXN
     378                            .asg 00H, _SWITCHFXN
     379                            .asg 00H, _READYFXN
     380                            .asg 00H, _NUM_HOOKS
     381 0000003c                   TSK_config  _STACKSIZE, _STACKSEG, _PRIORITY, _VCREATEFXN, _VDELETEFXN, _VEXITFXN, _SWITCHFXN,
1                           
1                                   ;; If MEM_gNumHeap then put in an err value in for TSK$stackseg
1                                   .if (MEM_gNumHeap == 0)
1                                           .asg    "-1", TSK$stackseg
1                                   .else 
1                                       .if ($symcmp("MEM_NULL", "MEM_NULL") == 0)
1                                           .asg    "-1", TSK$stackseg
1                                       .else
1                                           .asg    ":_stackseg:$idx", TSK$stackseg
1                                       .endif
1                                   .endif
1                           
1                                   .ref    _FXN_F_nop, _FXN_F_nop, _FXN_F_nop
1                           
1                                   .if $isname("00H")
1                                       .ref        :_switchfxn:
1                                   .endif
1                           
1                                   .if $isname("00H")
1                                       .ref :_readyfxn:
1                                   .endif
1                           
1                                   .global _TSK_exit
1                           
1                                   ;
1                                   ; Initialize counter for use in TSK_Obj
1                                   ;
1                                   .eval 0, TSK$strCount
1                           
1                                   .eval   00H, TSK$num_hooks
1                           
     382                    
     383                    ;; ======== IDL_config ========
     384                            .asg 00H, _USECLKIDLTIME
     385                            .asg GBL_NULL, _CALIBRFXN
     386 0000003c                   IDL_config  _USECLKIDLTIME, _CALIBRFXN
1                               .asg 00H,USECLKIDLTIME    ; used by IDL_init
     387                    
     388                    ;; ======== ISRC_config ========
     389 0000003c                   ISRC_config
     390                    
     391                    ;; ======== LOG_config ========
     392                            .asg 01H, _ENABLED
     393 0000003c                   LOG_config  _ENABLED
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   13

     394                    
     395                    ;; ======== PIP_config ========
     396                            .asg 00H, _gNumEmbed
     397                            .asg 00H, _gNextId
     398 0000003c                   PIP_config  _gNumEmbed, _gNextId
     399                    
     400                    ;; ======== SEM_config ========
     401 0000003c                   SEM_config
1                           
1                                   .global __SEM_dopost
     402                    
     403                    ;; ======== MBX_config ========
     404 0000003c                   MBX_config
     405                    
     406                    ;; ======== QUE_config ========
     407 0000003c                   QUE_config
     408                    
     409                    ;; ======== LCK_config ========
     410 0000003c                   LCK_config
     411                    
     412                    ;; ======== SIO_config ========
     413 0000003c                   SIO_config
     414                    
     415                    ;; ======== STS_config ========
     416 0000003c                   STS_config
1                                   ; only expand if the STS module is configured by the user
1                                   .if (STS$ = 1)
1                                       .if (STS$NUMOF > 0)
1                                       .endif
1                                   .endif
1                                   
     417                    
     418                    ;; ======== SYS_config ========
     419                            .asg _UTL_doAbort, _ABORTFXN
     420                            .asg _UTL_doError, _ERRORFXN
     421                            .asg _UTL_halt, _EXITFXN
     422                            .asg _UTL_doPutc, _PUTCFXN
     423 0000003c                   SYS_config  _ABORTFXN, _ERRORFXN, _EXITFXN, _PUTCFXN
1                                   .global SYS$config
1                           
1        00000000           SYS$config:     .usect  ".sys",4 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        0000003c                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        00000040 00000010          .word   4 * STD_TARGWORDMAUS
1        00000044 00000000-         .word   SYS$config
1        00000048 00000000!         .word   _UTL_doAbort
1        0000004c 00000000!         .word   _UTL_doError
1        00000050 00000000!         .word   _UTL_halt
1        00000054 00000000!         .word   _UTL_doPutc
1                           
     424                    
     425                    ;; ======== GIO_config ========
     426                            .asg _SEM_create, _CREATEFXN
     427                            .asg _SEM_delete, _DELETEFXN
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   14

     428                            .asg _SEM_pend, _PENDFXN
     429                            .asg _SEM_post, _POSTFXN
     430 00000058                   GIO_config  _CREATEFXN, _DELETEFXN, _PENDFXN, _POSTFXN
1                                   .if (GIO$ = 1)
1                           
1                                       .global _GIO
1                                       .global GIO$config
1                           
1        00000000           GIO$config:     .usect  ".gio", 4 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        00000058                       .sect       ".cinit"
1                                       .align      STD_TARGALIGN
1        00000058 00000010              .word       4 * STD_TARGWORDMAUS
1        0000005c 00000000-             .word       GIO$config
1        00000060 00000000!             .word   _SEM_create
1        00000064 00000000!             .word   _SEM_delete
1        00000068 00000000!             .word   _SEM_pend
1        0000006c 00000000!             .word   _SEM_post
1                           
1                           ;
1                           ;  Set up pointer to GIO configuration parameters
1                           ;
1        0000000c                       .bss    _GIO, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        00000070                       .sect   ".cinit"
1                                       .align  STD_TARGALIGN
1        00000070 00000004              .word   1 * STD_TARGWORDMAUS
1        00000074 0000000C-             .word   _GIO
1        00000078 00000000-             .word   GIO$config
1                           
1                                   .endif
     431                    
     432                    ;; ======== DEV_config ========
     433 0000007c                   DEV_config
1                                   .asg    0,      DEV$initCount
     434                    
     435                    ;; ======== UDEV_config ========
     436 0000007c                   UDEV_config
     437                    
     438                    ;; ======== DGN_config ========
     439 0000007c                   DGN_config
1                           
1                                   .if ($isdefed("STD_FLOATDSP") = 0)
1                           DGN_FLOATDSP    .set 0
1                                   .elseif (STD_FLOATDSP = 1)
1                           DGN_FLOATDSP    .set 1
1                                   .else
1                 00000000  DGN_FLOATDSP    .set 0
1                                   .endif
1                                   
1                                   .if (DGN_FLOATDSP == 1)
1                           
1                                   .global _DGN_fconst
1                                   .global _DGN_frand
1                                   .global _DGN_fsine
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   15

1                                   .global _DGN_user
1                           
1                                   .asg    _DGN_fconst,  DGN_CONST
1                                   .asg    _DGN_frand,  DGN_RAND
1                                   .asg    _DGN_fsine,  DGN_SINE
1                                   .asg    _DGN_user,   DGN_USER
1                           
1                                   .else
1                           
1                                   .global _DGN_iconst
1                                   .global _DGN_irand
1                                   .global _DGN_isine
1                                   .global _DGN_user
1                           
1                                   .asg    _DGN_iconst, DGN_CONST
1                                   .asg    _DGN_irand,  DGN_RAND
1                                   .asg    _DGN_isine,  DGN_SINE
1                                   .asg    _DGN_user,   DGN_USER
1                           
1                                   .endif
1                           
     440                    
     441                    ;; ======== DHL_config ========
     442                            .asg 00H, _gChannelsAvailable
     443 0000007c                   DHL_config  _gChannelsAvailable
1                           
1                                   .global _DHL_notify
1                           
1                                   .asg    0, DHL$count
1                           
     444                    
     445                    ;; ======== DPI_config ========
     446 0000007c                   DPI_config
1                                   .asg    0, DPI$devid
     447                    
     448                    ;; ======== HOOK_config ========
     449                            .asg 00H, _KNLID
     450 0000007c                   HOOK_config  _KNLID
1                           
1                                   .if (HOOK$ == 1)
1                           
1                                   .def    __HOOK_initFxnTable
1                                   .def    __HOOK_createFxnTable
1                                   .def    __HOOK_deleteFxnTable
1                                   .def    __HOOK_exitFxnTable
1                                   .def    __HOOK_readyFxnTable
1                                   .def    __HOOK_switchFxnTable
1                           
1                                   .endif
1                           
1                                   .asg    0, HOOK$index
1                                   .eval   00H, HOOK$knl_index
1                           
1                                   .def    __HOOK_knlId
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   16

1        00000010                   .bss    __HOOK_knlId, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        0000007c                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        00000080 00000004          .word   1 * STD_TARGWORDMAUS
1        00000084 00000010-         .word   __HOOK_knlId
1        00000088 00000000          .word   0
1                           
     451                    
     452                    ;; ======== DIO_config ========
     453                            .asg 00H, _STATIC
     454                            .asg 00H, _NUMTSKBASE
     455                            .asg 00H, _NUMSWIBASE
     456 0000008c                   DIO_config  _STATIC, _NUMTSKBASE, _NUMSWIBASE
1                                   .if (00H)
1                                       .if (:_numTskBase: != 0)
1                                           .global _DIO_NUMTSKSTATIC  ; Number of Static TSK DIO objects
1                                           .global _DIO_TSKTABLE      ; Table of DIO objects for TSK.
1                           
1                                           .eval DIO_OBJSIZE * :_numTskBase:, DIO_TABLESIZE
1                           
1                           ;
1                           ;  Allocate space for DIO_NUMTSKSTATIC value.
1                           ;  This value is used in Static TSK version of DIO.
1                           ;  Allocate space for TSK DIO table
1                           ;
1                           _DIO_NUMTSKSTATIC       .usect ".dio", 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           _DIO_TSKTABLE           .usect ".dio", DIO_TABLESIZE * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                           ;
1                                           ;  initialize DIO_NUMTSKSTATIC.
1                                           ;
1                                           .sect ".cinit"
1                                           .align STD_TARGALIGN
1                                           .word 1 * STD_TARGWORDMAUS
1                                           .word _DIO_NUMTSKSTATIC
1                                           .word :_numTskBase:
1                                       
1                                           .eval   0, count
1                           
1                                           .loop
1                           
1                                               ;
1                                               ;  Initialize the TSK DIO table.
1                                               ;
1                                               .sect ".cinit"
1                                               .align STD_TARGALIGN
1                                               .word DIO_OBJSIZE * STD_TARGWORDMAUS
1                                               .word _DIO_TSKTABLE + DIO_OBJSIZE * :count: * STD_TARGWORDMAUS
1                                               .word 0                     ; fxns
1                                               .word 0                     ; chanp
1                                               .word dio:count:$complete   ; complete
1                                               .word 0                     ; ready
1                                               .word 0                     ; extra word for union
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   17

1                                               ;  create the complete SEM object
1                                               DIO_semObject dio:count:$complete, 0
1                           
1                                               .eval count + 1, count
1                                               .break (count == :_numTskBase:)
1                                           .endloop
1                                       .endif      ; .if (:_numTskBase: != 0)
1                           
1                                       .if (:_numSwiBase: != 0)
1                                           .global _DIO_NUMCBSTATIC  ; Number of Cb Static DIO objects.
1                                           .global _DIO_CBTABLE      ; Table of DIO objects for Callback.
1                           
1                                           .eval DIO_OBJSIZE * :_numSwiBase:, DIO_TABLESIZE
1                           
1                           ;
1                           ;  Allocate space for DIO_NUMCBSTATIC value
1                           ;  This value is used in Static Callback version of DIO.
1                           ;  Allocate space for Callback DIO Table
1                           ;
1                           _DIO_NUMCBSTATIC        .usect ".dio", 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           _DIO_CBTABLE            .usect ".dio", DIO_TABLESIZE * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                           ;
1                                           ;  initialize DIO_NUMCBSTATIC.
1                                           ;
1                                           .sect ".cinit"
1                                           .align STD_TARGALIGN
1                                           .word 1 * STD_TARGWORDMAUS
1                                           .word _DIO_NUMCBSTATIC
1                                           .word :_numSwiBase:
1                                   
1                                           .eval   0, count
1                           
1                                           .loop
1                                               
1                                               ;
1                                               ;  Initialize the Callback DIO table.
1                                               ;
1                                               .sect ".cinit"
1                                               .align STD_TARGALIGN
1                                               .word DIO_OBJSIZE * STD_TARGWORDMAUS
1                                               .word _DIO_CBTABLE + DIO_OBJSIZE * :count: * STD_TARGWORDMAUS
1                                               .word 0                     ; fxns
1                                               .word 0                     ; chanp
1                                               .word 0                     ; context.cb.fxn
1                                               .word 0                     ; context.cb.arg0
1                                               .word 0                     ; context.cb.arg1
1                                           
1                                               .eval count + 1, count
1                                               .break (count == :_numSwiBase:)
1                                           .endloop
1                                       .endif      ; .if (:_numSiBase: != 0)
1                                   .endif          ; .if (:_static:)
1                           
     457                    
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   18

     458                    ;; ======== MEM_Obj ISRAM ========
     459                    ;; This object defines space for the DSP's on-chip memory
     460                    ;;
     461                    ;; MEM_Obj ISRAM (len, iAllocHeap, iSegZero, iHeapId)
     462                            .global ISRAM
     463                            .asg 02fff8H, _len
     464                            .asg 01H, _iAllocHeap
     465                            .asg ISRAM, _iSegZero
     466                            .asg segment_name, _iHeapId
     467 0000008c                   MEM_Obj 1, ISRAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId
1                           
1                               .if 1 == 1
1                           
1                                   .asg -1, idxVal    ; default index value
1                               
1                                 .if    02fff8H
1                           
1                                   .if 01H
1                           
1                                       .global ISRAM$B    ; heap base address
1                                       .global ISRAM$L    ; heap length
1                           
1                                       ;
1                                       ; Define an entry in _MEM_memtab[] (allocated out of bss in
1                                       ; MEM_config.
1                                       ; The following block must match the MEM_Segment structure
1                                       ; in mem.h.
1                                       ;
1        0000008c                       .sect ".cinit"
1                                       .align STD_TARGALIGN
1                                       .if    $symcmp("ISRAM", "ISRAM") == 0
1        00000090 0000000C                    .word 3 * STD_TARGWORDMAUS
1        00000094 00000000-                   .word _MEM_memtab   
1                                             .eval 0, idxVal
1                                       .else
1                                             .word 3 * STD_TARGWORDMAUS
1                                             .word _MEM_memtab + MEM_tabIdx *3 * STD_TARGWORDMAUS
1                                             ; assign meaningful index value
1                                             .eval MEM_tabIdx, idxVal
1                           
1                                             ; post-increment macro variable for next pass
1                                             .eval    MEM_tabIdx + 1, MEM_tabIdx
1                                       .endif
1        00000098 00000000!                   .word ISRAM$B
1        0000009c 00000000!                   .word ISRAM$L
1        000000a0 00000001                    .word 1
1                           
1                                             ; create array index variable (using the segment's name)
1        00000014                             .bss ISRAM, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1        000000a4                             .sect ".cinit"
1                                             .align STD_TARGALIGN
1        000000a8 00000004                    .word 1 * STD_TARGWORDMAUS
1        000000ac 00000014-                   .word ISRAM   
1        000000b0 00000000                    .word 0
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   19

1                                            ; create array index variable (using the segment's name)
1                                           .if $symcmp("segment_name", "segment_name") != 0
1                                               .global :_iHeapId:
1                           :_iHeapId:          .set :name:
1                                           .endif
1                           
1                           
1                 00000000  ISRAM$idx .set    0    ; used by MEM_config
1                           
1                                   .else
1                           :name: .set -1        ; To satisfy assignment of C alias in *cfg.cmd file.
1                           
1                                   .endif            ; .if :iHeap:
1                           
1                                 .endif            ; .if 02fff8H
1                           
1                               .endif                ; .if 1 == 1
1                           
     468                    
     469                    ;; ======== CLK_Obj PRD_clock ========
     470                    ;; This clock function calls PRD_tick from within the on-chip timer ISR
     471                    ;;
     472                    ;; CLK_Obj PRD_clock (function)
     473                            .global PRD_clock
     474                            .asg PRD_F_tick, _function
     475 000000b4                   CLK_Obj 1, PRD_clock, 0, _function
1        000000b4                   CHK_nargs "CLK_Obj", fxn
1                                   .if ($symcmp("", "error") = 0)
1                                       .emsg "CLK_OBJ parameter error."
1                                   .endif
1                           
1                                   .var fxnlen
1                                   .eval $symlen("PRD_F_tick"),fxnlen
1                           
1                                   .if (1 = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global PRD_clock
1                           
1                                   .if ($symcmp("PRD_F_tick", "0") != 0)
1                                   .global PRD_F_tick
1                                   .endif
1                           
1                           PRD_clock  .tag    CLK_Obj         ; declare name as having type CLK_Obj
1                           
1                           ; allocate all CLK objs contiguously in ".clk"
1        00000000           PRD_clock       .usect ".clk", STD_TARGWORDMAUS * 1, STD_TARGWORDMAUS
1                           
1        000000b4                   .sect ".cinit"
1                           
1                                   .align  8
1                           
1        000000b8 00000004          .field  STD_TARGWORDMAUS * 1
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   20

1        000000bc 00000000-         .field  PRD_clock    
1                           
1        000000c0 00000000!         .field  PRD_F_tick           ; fxn
1                           
     476                    
     477                    ;; ======== HWI_Obj HWI_RESET ========
     478                    ;; defines function for the RESET ISR
     479                    ;;
     480                    ;; HWI_Obj HWI_RESET (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     481                            .global HWI_RESET
     482                            .asg _c_int00, _function
     483                            .asg "Nothing", _monitor
     484                            .asg 00H, _addr
     485                            .asg "signed", _dataType
     486                            .asg "STS_add(*addr)", _operation
     487                            .asg "USER", _client
     488                            .asg 00H, _iUseDispatcher
     489                            .asg 00H, _iArg
     490                            .asg 01H, _IntrMask
     491                            .asg 01H, _iCCBitMask
     492 000000c4                   HWI_Obj 1, HWI_RESET, 0, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDisp
1        000000c4                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_RESET, _c_int00
1                           
1                                   .if (1 != 0)
1                 00000000  HWI_RESET               .set    0
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi0, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   21

1                                   .if (0 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    _c_int00, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("_c_int00", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (0 = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg _c_int00, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   22

1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000000                   .sect ".hwi_vec"
1                                   .global hwi0
1                           hwi0:
1                                   .if ((0 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1        00000000 0000002A!             mvkl _c_int00,b0    ; load destination function address to b0
1        00000004 0000006A!             mvkh _c_int00,b0
1        00000008 00000362              b b0                ; start branch to destination function  
1        0000000c 0000A35A              zero b0             ; disable interrupts by clearing 'IER'
1        00000010 020003A2              mvc b0,ier
1        00000014 00000000              nop                 ; fill delay slot, pad packet
1        00000018 00000000              nop                 ; fill delay slot, pad packet
1        0000001c 00000000              nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (0 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   23

1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1                           spin?
1                                       b spin?             ; nested branches to block interrupts
1                                       nop 4
1                                       b spin?
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   24

1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     493                    
     494                    ;; ======== HWI_Obj HWI_NMI ========
     495                    ;; defines function for the NMI ISR
     496                    ;;
     497                    ;; HWI_Obj HWI_NMI (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMa
     498                            .global HWI_NMI
     499                            .asg HWI_unused, _function
     500                            .asg "Nothing", _monitor
     501                            .asg 00H, _addr
     502                            .asg "signed", _dataType
     503                            .asg "STS_add(*addr)", _operation
     504                            .asg "USER", _client
     505                            .asg 00H, _iUseDispatcher
     506                            .asg 00H, _iArg
     507                            .asg 02H, _IntrMask
     508                            .asg 01H, _iCCBitMask
     509 00000020                   HWI_Obj 1, HWI_NMI, 1, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispat
1        00000020                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   25

1                           
1                                   .global HWI_NMI, HWI_unused
1                           
1                                   .if (1 != 0)
1                 00000001  HWI_NMI         .set    1
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi1, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (1 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   26

1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000020                   .sect ".hwi_vec"
1                                   .global hwi1
1                           hwi1:
1                                   .if ((1 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   27

1                                   .elseif (1 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        00000020           spin?
1        00000020 00000012              b spin?             ; nested branches to block interrupts
1        00000024 00006000              nop 4
1        00000028 00000012              b spin?
1        0000002c 00000000              nop
1        00000030 00000000              nop
1        00000034 00000000              nop
1        00000038 00000000              nop
1        0000003c 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   28

1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   29

1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     510                    
     511                    ;; ======== HWI_Obj HWI_RESERVED0 ========
     512                    ;; RESERVED for RTDX
     513                    ;;
     514                    ;; HWI_Obj HWI_RESERVED0 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, 
     515                            .global HWI_RESERVED0
     516                            .asg RESERVED, _function
     517                            .asg "Nothing", _monitor
     518                            .asg 00H, _addr
     519                            .asg "signed", _dataType
     520                            .asg "STS_add(*addr)", _operation
     521                            .asg "RTDX", _client
     522                            .asg 00H, _iUseDispatcher
     523                            .asg 00H, _iArg
     524                            .asg 04H, _IntrMask
     525                            .asg 01H, _iCCBitMask
     526 00000040                   HWI_Obj 1, HWI_RESERVED0, 2, _function, _monitor, _addr, _dataType, _operation, _client, _iUse
1        00000040                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_RESERVED0, RESERVED
1                           
1                                   .if (1 != 0)
1                 00000002  HWI_RESERVED0           .set    2
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi2, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (RTDX$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   30

1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (2 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    RESERVED, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("RESERVED", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (1 = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg RESERVED, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   31

1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000040                   .sect ".hwi_vec"
1                                   .global hwi2
1                           hwi2:
1                                   .if ((2 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (2 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1        00000040           spin?
1        00000040 00000012                  b spin?         ; nested branches to block interrupts
1        00000044 00006000                  nop 4
1        00000048 00000012                  b spin?
1        0000004c 00000000                  nop
1        00000050 00000000                  nop
1        00000054 00000000                  nop
1        00000058 00000000                  nop
1        0000005c 00000000                  nop
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   32

1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1                           spin?
1                                       b spin?             ; nested branches to block interrupts
1                                       nop 4
1                                       b spin?
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   33

1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     527                    
     528                    ;; ======== HWI_Obj HWI_RESERVED1 ========
     529                    ;; RESERVED for RTDX
     530                    ;;
     531                    ;; HWI_Obj HWI_RESERVED1 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, 
     532                            .global HWI_RESERVED1
     533                            .asg _RTDX_Poll, _function
     534                            .asg "Nothing", _monitor
     535                            .asg 00H, _addr
     536                            .asg "signed", _dataType
     537                            .asg "STS_add(*addr)", _operation
     538                            .asg "RTDX", _client
     539                            .asg 01H, _iUseDispatcher
     540                            .asg 00H, _iArg
     541                            .asg 08H, _IntrMask
     542                            .asg 01H, _iCCBitMask
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   34

     543 00000060                   HWI_Obj 1, HWI_RESERVED1, 3, _function, _monitor, _addr, _dataType, _operation, _client, _iUse
1        00000060                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_RESERVED1, _RTDX_Poll
1                           
1                                   .if (1 != 0)
1                 00000003  HWI_RESERVED1           .set    3
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi3, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (RTDX$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (3 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    01H, local_dispatch
1                                   .asg    _RTDX_Poll, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("_RTDX_Poll", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (1 = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg _RTDX_Poll, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   35

1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000060                   .sect ".hwi_vec"
1                                   .global hwi3
1                           hwi3:
1                                   .if ((3 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   36

1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (3 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!01H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1                           spin?
1                                       b spin?             ; nested branches to block interrupts
1                                       nop 4
1                                       b spin?
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                           
1                                   .else
1                                       .if ( 01H )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   37

1                                           .if ( $symcmp("_RTDX_Poll", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        _RTDX_Poll, dispatch_fxn
1                           
1                                           .endif
1                                           
1        00000060 003C54F6                  stw     b0, *b15--[2]
1        00000064 000CA35A                  mvk     3, b0
1        00000068 003C22F6                  stw     b0, *+b15[1]
1        0000006c 0000002A!                 mvkl    HWI_F_dispatch, b0
1        00000070 0000006A!                 mvkh    HWI_F_dispatch, b0
1        00000074 00000362                  b       b0
1        00000078 003C42E6                  ldw     *+b15[2], b0
1        0000007c 00006000                  nop     4
1                           
1        000000c4                           .sect   ".cinit"
1                                           .align  8
1        000000c8 00000010                  .field  4 * STD_TARGWORDMAUS
1        000000cc 00000030!                 .field  _HWI_dispatchTab + (4 * 3 * STD_TARGWORDMAUS)
1        000000d0 00000000!                 .field  _RTDX_Poll
1        000000d4 00000008                  .field  08H
1        000000d8 00000001                  .field  01H
1        000000dc 00000000                  .field  00H
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   38

1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     544                    
     545                    ;; ======== HWI_Obj HWI_INT4 ========
     546                    ;; defines the INT4 Interrupt
     547                    ;;
     548                    ;; HWI_Obj HWI_INT4 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrM
     549                            .global HWI_INT4
     550                            .asg HWI_unused, _function
     551                            .asg "Nothing", _monitor
     552                            .asg 00H, _addr
     553                            .asg "signed", _dataType
     554                            .asg "STS_add(*addr)", _operation
     555                            .asg "USER", _client
     556                            .asg 00H, _iUseDispatcher
     557                            .asg 00H, _iArg
     558                            .asg 010H, _IntrMask
     559                            .asg 01H, _iCCBitMask
     560 000000e0                   HWI_Obj 1, HWI_INT4, 4, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispa
1        000000e0                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT4, HWI_unused
1                           
1                                   .if (1 != 0)
1                 00000004  HWI_INT4                .set    4
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi4, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   39

1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (4 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   40

1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000080                   .sect ".hwi_vec"
1                                   .global hwi4
1                           hwi4:
1                                   .if ((4 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (4 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   41

1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        00000080           spin?
1        00000080 00000012              b spin?             ; nested branches to block interrupts
1        00000084 00006000              nop 4
1        00000088 00000012              b spin?
1        0000008c 00000000              nop
1        00000090 00000000              nop
1        00000094 00000000              nop
1        00000098 00000000              nop
1        0000009c 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   42

1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     561                    
     562                    ;; ======== HWI_Obj HWI_INT5 ========
     563                    ;; defines the INT5 Interrupt
     564                    ;;
     565                    ;; HWI_Obj HWI_INT5 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrM
     566                            .global HWI_INT5
     567                            .asg HWI_unused, _function
     568                            .asg "Nothing", _monitor
     569                            .asg 00H, _addr
     570                            .asg "signed", _dataType
     571                            .asg "STS_add(*addr)", _operation
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   43

     572                            .asg "USER", _client
     573                            .asg 00H, _iUseDispatcher
     574                            .asg 00H, _iArg
     575                            .asg 020H, _IntrMask
     576                            .asg 01H, _iCCBitMask
     577 000000a0                   HWI_Obj 1, HWI_INT5, 5, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispa
1        000000a0                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT5, HWI_unused
1                           
1                                   .if (1 != 0)
1                 00000005  HWI_INT5                .set    5
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi5, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (5 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   44

1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        000000a0                   .sect ".hwi_vec"
1                                   .global hwi5
1                           hwi5:
1                                   .if ((5 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   45

1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (5 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        000000a0           spin?
1        000000a0 00000012              b spin?             ; nested branches to block interrupts
1        000000a4 00006000              nop 4
1        000000a8 00000012              b spin?
1        000000ac 00000000              nop
1        000000b0 00000000              nop
1        000000b4 00000000              nop
1        000000b8 00000000              nop
1        000000bc 00000000              nop
1                           
1                                   .else
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   46

1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   47

1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     578                    
     579                    ;; ======== HWI_Obj HWI_INT6 ========
     580                    ;; defines the INT6 Interrupt
     581                    ;;
     582                    ;; HWI_Obj HWI_INT6 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrM
     583                            .global HWI_INT6
     584                            .asg HWI_unused, _function
     585                            .asg "Nothing", _monitor
     586                            .asg 00H, _addr
     587                            .asg "signed", _dataType
     588                            .asg "STS_add(*addr)", _operation
     589                            .asg "USER", _client
     590                            .asg 00H, _iUseDispatcher
     591                            .asg 00H, _iArg
     592                            .asg 040H, _IntrMask
     593                            .asg 01H, _iCCBitMask
     594 000000c0                   HWI_Obj 1, HWI_INT6, 6, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispa
1        000000c0                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT6, HWI_unused
1                           
1                                   .if (1 != 0)
1                 00000006  HWI_INT6                .set    6
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi6, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   48

1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (6 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   49

1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        000000c0                   .sect ".hwi_vec"
1                                   .global hwi6
1                           hwi6:
1                                   .if ((6 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (6 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   50

1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        000000c0           spin?
1        000000c0 00000012              b spin?             ; nested branches to block interrupts
1        000000c4 00006000              nop 4
1        000000c8 00000012              b spin?
1        000000cc 00000000              nop
1        000000d0 00000000              nop
1        000000d4 00000000              nop
1        000000d8 00000000              nop
1        000000dc 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   51

1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     595                    
     596                    ;; ======== HWI_Obj HWI_INT7 ========
     597                    ;; defines the INT7 Interrupt
     598                    ;;
     599                    ;; HWI_Obj HWI_INT7 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrM
     600                            .global HWI_INT7
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   52

     601                            .asg HWI_unused, _function
     602                            .asg "Nothing", _monitor
     603                            .asg 00H, _addr
     604                            .asg "signed", _dataType
     605                            .asg "STS_add(*addr)", _operation
     606                            .asg "USER", _client
     607                            .asg 00H, _iUseDispatcher
     608                            .asg 00H, _iArg
     609                            .asg 080H, _IntrMask
     610                            .asg 01H, _iCCBitMask
     611 000000e0                   HWI_Obj 1, HWI_INT7, 7, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispa
1        000000e0                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT7, HWI_unused
1                           
1                                   .if (1 != 0)
1                 00000007  HWI_INT7                .set    7
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi7, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (7 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   53

1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        000000e0                   .sect ".hwi_vec"
1                                   .global hwi7
1                           hwi7:
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   54

1                                   .if ((7 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (7 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        000000e0           spin?
1        000000e0 00000012              b spin?             ; nested branches to block interrupts
1        000000e4 00006000              nop 4
1        000000e8 00000012              b spin?
1        000000ec 00000000              nop
1        000000f0 00000000              nop
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   55

1        000000f4 00000000              nop
1        000000f8 00000000              nop
1        000000fc 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   56

1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     612                    
     613                    ;; ======== HWI_Obj HWI_INT8 ========
     614                    ;; defines the INT8 Interrupt
     615                    ;;
     616                    ;; HWI_Obj HWI_INT8 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrM
     617                            .global HWI_INT8
     618                            .asg HWI_unused, _function
     619                            .asg "Nothing", _monitor
     620                            .asg 00H, _addr
     621                            .asg "signed", _dataType
     622                            .asg "STS_add(*addr)", _operation
     623                            .asg "USER", _client
     624                            .asg 00H, _iUseDispatcher
     625                            .asg 00H, _iArg
     626                            .asg 0100H, _IntrMask
     627                            .asg 01H, _iCCBitMask
     628 00000100                   HWI_Obj 1, HWI_INT8, 8, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispa
1        00000100                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT8, HWI_unused
1                           
1                                   .if (1 != 0)
1                 00000008  HWI_INT8                .set    8
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi8, vector               ; default vector = self branch
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   57

1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (8 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   58

1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000100                   .sect ".hwi_vec"
1                                   .global hwi8
1                           hwi8:
1                                   .if ((8 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (8 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   59

1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        00000100           spin?
1        00000100 00000012              b spin?             ; nested branches to block interrupts
1        00000104 00006000              nop 4
1        00000108 00000012              b spin?
1        0000010c 00000000              nop
1        00000110 00000000              nop
1        00000114 00000000              nop
1        00000118 00000000              nop
1        0000011c 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   60

1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     629                    
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   61

     630                    ;; ======== HWI_Obj HWI_INT9 ========
     631                    ;; defines the INT9 Interrupt
     632                    ;;
     633                    ;; HWI_Obj HWI_INT9 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrM
     634                            .global HWI_INT9
     635                            .asg _RTDX_Poll, _function
     636                            .asg "Nothing", _monitor
     637                            .asg 00H, _addr
     638                            .asg "signed", _dataType
     639                            .asg "STS_add(*addr)", _operation
     640                            .asg "RTDX", _client
     641                            .asg 01H, _iUseDispatcher
     642                            .asg 00H, _iArg
     643                            .asg 0208H, _IntrMask
     644                            .asg 01H, _iCCBitMask
     645 00000120                   HWI_Obj 1, HWI_INT9, 9, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispa
1        00000120                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT9, _RTDX_Poll
1                           
1                                   .if (1 != 0)
1                 00000009  HWI_INT9                .set    9
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi9, vector               ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (RTDX$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (9 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    01H, local_dispatch
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   62

1                                   .asg    _RTDX_Poll, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("_RTDX_Poll", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (1 = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg _RTDX_Poll, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   63

1                                   ; address space.
1                           
1        00000120                   .sect ".hwi_vec"
1                                   .global hwi9
1                           hwi9:
1                                   .if ((9 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (9 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!01H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1                           spin?
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   64

1                                       b spin?             ; nested branches to block interrupts
1                                       nop 4
1                                       b spin?
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                           
1                                   .else
1                                       .if ( 01H )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp("_RTDX_Poll", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        _RTDX_Poll, dispatch_fxn
1                           
1                                           .endif
1                                           
1        00000120 003C54F6                  stw     b0, *b15--[2]
1        00000124 0024A35A                  mvk     9, b0
1        00000128 003C22F6                  stw     b0, *+b15[1]
1        0000012c 0000002A!                 mvkl    HWI_F_dispatch, b0
1        00000130 0000006A!                 mvkh    HWI_F_dispatch, b0
1        00000134 00000362                  b       b0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   65

1        00000138 003C42E6                  ldw     *+b15[2], b0
1        0000013c 00006000                  nop     4
1                           
1        000000e0                           .sect   ".cinit"
1                                           .align  8
1        000000e0 00000010                  .field  4 * STD_TARGWORDMAUS
1        000000e4 00000090!                 .field  _HWI_dispatchTab + (4 * 9 * STD_TARGWORDMAUS)
1        000000e8 00000000!                 .field  _RTDX_Poll
1        000000ec 00000208                  .field  0208H
1        000000f0 00000001                  .field  01H
1        000000f4 00000000                  .field  00H
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     646                    
     647                    ;; ======== HWI_Obj HWI_INT10 ========
     648                    ;; defines the INT10 Interrupt
     649                    ;;
     650                    ;; HWI_Obj HWI_INT10 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     651                            .global HWI_INT10
     652                            .asg HWI_unused, _function
     653                            .asg "Nothing", _monitor
     654                            .asg 00H, _addr
     655                            .asg "signed", _dataType
     656                            .asg "STS_add(*addr)", _operation
     657                            .asg "USER", _client
     658                            .asg 00H, _iUseDispatcher
     659                            .asg 00H, _iArg
     660                            .asg 0400H, _IntrMask
     661                            .asg 01H, _iCCBitMask
     662 000000f8                   HWI_Obj 1, HWI_INT10, 10, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDis
1        000000f8                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT10, HWI_unused
1                           
1                                   .if (1 != 0)
1                 0000000A  HWI_INT10               .set    10
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   66

1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi10, vector              ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (10 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   67

1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000140                   .sect ".hwi_vec"
1                                   .global hwi10
1                           hwi10:
1                                   .if ((10 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (10 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   68

1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        00000140           spin?
1        00000140 00000012              b spin?             ; nested branches to block interrupts
1        00000144 00006000              nop 4
1        00000148 00000012              b spin?
1        0000014c 00000000              nop
1        00000150 00000000              nop
1        00000154 00000000              nop
1        00000158 00000000              nop
1        0000015c 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   69

1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   70

1                                       .endif
1                           
1                                   .endif
1                                   
     663                    
     664                    ;; ======== HWI_Obj HWI_INT11 ========
     665                    ;; defines the INT11 Interrupt
     666                    ;;
     667                    ;; HWI_Obj HWI_INT11 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     668                            .global HWI_INT11
     669                            .asg HWI_unused, _function
     670                            .asg "Nothing", _monitor
     671                            .asg 00H, _addr
     672                            .asg "signed", _dataType
     673                            .asg "STS_add(*addr)", _operation
     674                            .asg "USER", _client
     675                            .asg 00H, _iUseDispatcher
     676                            .asg 00H, _iArg
     677                            .asg 0800H, _IntrMask
     678                            .asg 01H, _iCCBitMask
     679 00000160                   HWI_Obj 1, HWI_INT11, 11, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDis
1        00000160                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT11, HWI_unused
1                           
1                                   .if (1 != 0)
1                 0000000B  HWI_INT11               .set    11
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi11, vector              ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   71

1                                   .if (11 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   72

1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000160                   .sect ".hwi_vec"
1                                   .global hwi11
1                           hwi11:
1                                   .if ((11 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (11 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   73

1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        00000160           spin?
1        00000160 00000012              b spin?             ; nested branches to block interrupts
1        00000164 00006000              nop 4
1        00000168 00000012              b spin?
1        0000016c 00000000              nop
1        00000170 00000000              nop
1        00000174 00000000              nop
1        00000178 00000000              nop
1        0000017c 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   74

1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     680                    
     681                    ;; ======== HWI_Obj HWI_INT12 ========
     682                    ;; defines the INT12 Interrupt
     683                    ;;
     684                    ;; HWI_Obj HWI_INT12 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     685                            .global HWI_INT12
     686                            .asg HWI_unused, _function
     687                            .asg "Nothing", _monitor
     688                            .asg 00H, _addr
     689                            .asg "signed", _dataType
     690                            .asg "STS_add(*addr)", _operation
     691                            .asg "USER", _client
     692                            .asg 00H, _iUseDispatcher
     693                            .asg 00H, _iArg
     694                            .asg 01000H, _IntrMask
     695                            .asg 01H, _iCCBitMask
     696 00000180                   HWI_Obj 1, HWI_INT12, 12, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDis
1        00000180                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   75

1                           
1                                   .global HWI_INT12, HWI_unused
1                           
1                                   .if (1 != 0)
1                 0000000C  HWI_INT12               .set    12
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi12, vector              ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (12 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   76

1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        00000180                   .sect ".hwi_vec"
1                                   .global hwi12
1                           hwi12:
1                                   .if ((12 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   77

1                                   .elseif (12 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        00000180           spin?
1        00000180 00000012              b spin?             ; nested branches to block interrupts
1        00000184 00006000              nop 4
1        00000188 00000012              b spin?
1        0000018c 00000000              nop
1        00000190 00000000              nop
1        00000194 00000000              nop
1        00000198 00000000              nop
1        0000019c 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   78

1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   79

1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     697                    
     698                    ;; ======== HWI_Obj HWI_INT13 ========
     699                    ;; defines the INT13 Interrupt
     700                    ;;
     701                    ;; HWI_Obj HWI_INT13 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     702                            .global HWI_INT13
     703                            .asg HWI_unused, _function
     704                            .asg "Nothing", _monitor
     705                            .asg 00H, _addr
     706                            .asg "signed", _dataType
     707                            .asg "STS_add(*addr)", _operation
     708                            .asg "USER", _client
     709                            .asg 00H, _iUseDispatcher
     710                            .asg 00H, _iArg
     711                            .asg 02000H, _IntrMask
     712                            .asg 01H, _iCCBitMask
     713 000001a0                   HWI_Obj 1, HWI_INT13, 13, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDis
1        000001a0                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT13, HWI_unused
1                           
1                                   .if (1 != 0)
1                 0000000D  HWI_INT13               .set    13
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi13, vector              ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   80

1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (13 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   81

1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        000001a0                   .sect ".hwi_vec"
1                                   .global hwi13
1                           hwi13:
1                                   .if ((13 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (13 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   82

1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        000001a0           spin?
1        000001a0 00000012              b spin?             ; nested branches to block interrupts
1        000001a4 00006000              nop 4
1        000001a8 00000012              b spin?
1        000001ac 00000000              nop
1        000001b0 00000000              nop
1        000001b4 00000000              nop
1        000001b8 00000000              nop
1        000001bc 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   83

1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     714                    
     715                    ;; ======== HWI_Obj HWI_INT14 ========
     716                    ;; defines the INT14 Interrupt
     717                    ;;
     718                    ;; HWI_Obj HWI_INT14 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     719                            .global HWI_INT14
     720                            .asg CLK_F_isr, _function
     721                            .asg "Nothing", _monitor
     722                            .asg 00H, _addr
     723                            .asg "signed", _dataType
     724                            .asg "STS_add(*addr)", _operation
     725                            .asg "CLK", _client
     726                            .asg 01H, _iUseDispatcher
     727                            .asg CLK_A_TABBEG, _iArg
     728                            .asg 04000H, _IntrMask
     729                            .asg 01H, _iCCBitMask
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   84

     730 000001c0                   HWI_Obj 1, HWI_INT14, 14, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDis
1        000001c0                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT14, CLK_F_isr
1                           
1                                   .if (1 != 0)
1                 0000000E  HWI_INT14               .set    14
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi14, vector              ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (CLK$ = 1)
1                                           .asg 1, clientcfg
1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (14 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    01H, local_dispatch
1                                   .asg    CLK_F_isr, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("CLK_F_isr", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (1 = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg CLK_F_isr, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   85

1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        000001c0                   .sect ".hwi_vec"
1                                   .global hwi14
1                           hwi14:
1                                   .if ((14 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   86

1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (14 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!01H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1                           spin?
1                                       b spin?             ; nested branches to block interrupts
1                                       nop 4
1                                       b spin?
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                                       nop
1                           
1                                   .else
1                                       .if ( 01H )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   87

1                                           .if ( $symcmp("CLK_F_isr", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1        000001c0 003C54F6                  stw     b0, *b15--[2]
1        000001c4 0038A35A                  mvk     14, b0
1        000001c8 003C22F6                  stw     b0, *+b15[1]
1        000001cc 0000002A!                 mvkl    CLK_F_isr, b0
1        000001d0 0000006A!                 mvkh    CLK_F_isr, b0
1        000001d4 00000362                  b       b0
1        000001d8 003C42E6                  ldw     *+b15[2], b0
1        000001dc 00006000                  nop     4
1                           
1        000000f8                           .sect   ".cinit"
1                                           .align  8
1        000000f8 00000010                  .field  4 * STD_TARGWORDMAUS
1        000000fc 000000E0!                 .field  _HWI_dispatchTab + (4 * 14 * STD_TARGWORDMAUS)
1        00000100 00000000!                 .field  FXN_F_run
1        00000104 00004000                  .field  04000H
1        00000108 00000001                  .field  01H
1        0000010c 00000000!                 .field  CLK_A_TABBEG
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   88

1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     731                    
     732                    ;; ======== HWI_Obj HWI_INT15 ========
     733                    ;; defines the INT15 Interrupt
     734                    ;;
     735                    ;; HWI_Obj HWI_INT15 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Intr
     736                            .global HWI_INT15
     737                            .asg HWI_unused, _function
     738                            .asg "Nothing", _monitor
     739                            .asg 00H, _addr
     740                            .asg "signed", _dataType
     741                            .asg "STS_add(*addr)", _operation
     742                            .asg "USER", _client
     743                            .asg 00H, _iUseDispatcher
     744                            .asg 00H, _iArg
     745                            .asg 08000H, _IntrMask
     746                            .asg 01H, _iCCBitMask
     747 00000110                   HWI_Obj 1, HWI_INT15, 15, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDis
1        00000110                   CHK_nargs "HWI_Obj", client
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global HWI_INT15, HWI_unused
1                           
1                                   .if (1 != 0)
1                 0000000F  HWI_INT15               .set    15
1                                   .endif
1                                   
1                                   .var    vector, clientcfg
1                           
1                                   .asg hwi15, vector              ; default vector = self branch
1                           
1                                   ; set clientcfg to 1 (or 0) according to whether the client module 
1                                   ; is configured (or not).
1                                   .asg 0, clientcfg
1                                   .if ($symcmp(client, "USER") != 0) 
1                                     .if ($symcmp(client, "CSL") == 0)
1                                       .asg 1, clientcfg
1                                     .else
1                                       .if (:client:$ = 1)
1                                           .asg 1, clientcfg
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   89

1                                       .endif
1                                     .endif
1                                   .endif
1                           
1                                   ; The following call to .mexit is to avoid generation of HWI objects
1                                   ; for interrupts greater that INT15.  This allows an HWI_UNUSED object
1                                   ; to be listed in the configuration.  This exit code was first put at
1                                   ; the start of the macro but this caused an error saying that USER$
1                                   ; was undefined.  The exit was put at this point in the macro to avoid
1                                   ; the build error. 
1                                   .if (15 > 15)
1                                       .mexit
1                                   .endif
1                           
1                                   .asg    00H, local_dispatch
1                                   .asg    HWI_unused, local_fxn
1                           
1                                   ; if this object is configured *and* is not "HWI_unused"
1                                   .if ((1 != 0) & ($symcmp("HWI_unused", "HWI_unused") != 0))
1                           
1                                       ; if client is USER or another configured system module
1                                       .if (($symcmp(client, "USER") = 0) | (:clientcfg: = 1))
1                           
1                                           ; if no monitor, simply branch to user function directly
1                                           .if ($symcmp(monitor, "Nothing") = 0)
1                                               .asg :local_fxn:, vector    ; vector = user specified fxn
1                           
1                                           ; else when need to monitor, create a function stub and call it
1                                           .else
1                                               .if ( local_dispatch )
1                                                   .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, CLK_F_isr
1                                                   .else
1                                                       HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, HWI_F_dispat
1                                                   .endif
1                                               .else
1                                                   HWI_mkStub :name:_stub, monitor, addr, operation, :name:_STS, :local_fxn:
1                                               .endif
1                                               .asg :name:_stub, vector ; vector = HWI stub
1                                           .endif
1                                       .endif
1                                   .endif
1                           
1                           
1                                   .if ($isdefed("HWI_GENERATE_RESET_VEC") = 0)
1                                       .asg        0, HWI_GENERATE_RESET_VEC
1                                   .endif
1                           
1                                   .if HWI_GENERATE_RESET_VEC = 1  ; HWI_GENERATE_RESET_VEC is generated
1                                                                   ; by the config tool
1                                       .sect ".hwi_reset"
1                           
1                                       .if ((id == 0))
1                           
1                                           ; For reset vector do not save/restore register used for 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   90

1                                           ; branch, because b15 has not been initialized yet, and this 
1                                           ; causes an access to an indeterminate place in memory.
1                           
1                                           mvkl :vector:,b0    ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0            ; start branch to destination function  
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                           nop             ; fill delay slot, pad packet
1                                       .endif
1                                   .endif
1                           
1                                   ; Now define ISFP.  Use a register for branching so can reach whole 
1                                   ; address space.
1                           
1        000001e0                   .sect ".hwi_vec"
1                                   .global hwi15
1                           hwi15:
1                                   .if ((15 == 0))
1                           
1                                       ; For reset vector do not save/restore register used for branch,
1                                       ; because b15 has not been initialized yet, and this causes an 
1                                       ; access to an indeterminate place in memory.
1                           
1                                       mvkl :vector:,b0    ; load destination function address to b0
1                                       mvkh :vector:,b0
1                                       b b0                ; start branch to destination function  
1                                       zero b0             ; disable interrupts by clearing 'IER'
1                                       mvc b0,ier
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                                       nop                 ; fill delay slot, pad packet
1                           
1                                   .elseif (15 == 2)
1                                       .if (RTDX_USERTEXECUTION)
1                           
1                                           .ref RTEMU_exe
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack 
1                                           mvkl RTEMU_exe,b0       ; load destination function address
1                                           mvkh RTEMU_exe,b0
1                                           b b0                    ; start branch to destination function  
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 b0 restore/branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                           
1                                       .else
1                           
1                           spin?
1                                           b spin?         ; nested branches to block interrupts
1                                           nop 4
1                                           b spin?
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   91

1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                                           nop
1                           
1                                       .endif
1                           
1                                   .elseif (($symcmp(local_fxn, "HWI_unused") == 0) & (!00H))
1                           
1                                       ; plug inifinite loop -- with nested branches to
1                                       ; disable interrupts -- for all undefined vectors that
1                                       ; aren't checked to "Use HWI Dispatcher"
1                           
1        000001e0           spin?
1        000001e0 00000012              b spin?             ; nested branches to block interrupts
1        000001e4 00006000              nop 4
1        000001e8 00000012              b spin?
1        000001ec 00000000              nop
1        000001f0 00000000              nop
1        000001f4 00000000              nop
1        000001f8 00000000              nop
1        000001fc 00000000              nop
1                           
1                                   .else
1                                       .if ( local_dispatch )
1                                           .global _HWI_dispatchTab
1                                           .var    dispatch_fxn
1                                           .var    vec_fxn
1                           
1                                           .if ( $symcmp(":local_fxn:", "CLK_F_isr") = 0 )
1                           
1                                               .global     CLK_F_isr
1                                               .global     FXN_F_run
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
1                                                   .asg    CLK_F_isr, vec_fxn
1                                               .else
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        FXN_F_run, dispatch_fxn
1                           
1                                           .else
1                                               .global     HWI_F_dispatch
1                                               ;
1                                               ; We allow dispatcher to be selected even for HWIs that
1                                               ; are HWI_unused.  Call FXN_F_nop in this case.
1                                               ; The assumption is that the user will subsequently call
1                                               ; IRQ_config to set the function to something real.
1                                               ;
1                                               .if ($symcmp(local_fxn, "HWI_unused") == 0)
1                                                   .asg    FXN_F_nop, local_fxn
1                                               .endif
1                           
1                                               .if ($symcmp(monitor, "Nothing") = 0)
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   92

1                                                   .asg    HWI_F_dispatch, vec_fxn
1                                               .else
1                                                   ; HWI_F_dispatch will be called by monitor
1                                                   .asg    :name:_stub, vec_fxn
1                                               .endif
1                                               .asg        :local_fxn:, dispatch_fxn
1                           
1                                           .endif
1                                           
1                                           stw     b0, *b15--[2]
1                                           mvk     :id:, b0
1                                           stw     b0, *+b15[1]
1                                           mvkl    :vec_fxn:, b0
1                                           mvkh    :vec_fxn:, b0
1                                           b       b0
1                                           ldw     *+b15[2], b0
1                                           nop     4
1                           
1                                           .sect   ".cinit"
1                                           .align  8
1                                           .field  4 * STD_TARGWORDMAUS
1                                           .field  _HWI_dispatchTab + (4 * :id: * STD_TARGWORDMAUS)
1                                           .field  :dispatch_fxn:
1                                           .field  :intrmask:
1                                           .field  :ccmask:
1                                           .field  :arg:
1                           
1                                       .else
1                                           ; For all vectors besides reset use a common packet format. This
1                                           ; packet can be used for self branches as well as branches to
1                                           ; HWI stubs.
1                           
1                                           stw b0,*b15--[2]        ; temp save b0 on stack
1                                           mvkl :vector:,b0        ; load destination function address to b0
1                                           mvkh :vector:,b0
1                                           b b0                    ; start branch to destination function
1                                           ldw *++b15[2],b0        ; restore b0 register
1                                           nop 2                   ; fill 2 of b0 restore and branch delay slots
1                                           nop                     ; fill delay slot, pad packet
1                                           nop                     ; fill delay slot, pad packet
1                                       .endif
1                           
1                                   .endif
1                                   
     748                    
     749                    ;; ======== SWI_Obj KNL_swi ========
     750                    ;; This Software Interrupt calls the TSK scheduler
     751                    ;;
     752                    ;; SWI_Obj KNL_swi (function, pri, mailbox, arg0, arg1, dorta)
     753                            .global KNL_swi
     754                            .asg _KNL_run, _function
     755                            .asg 00H, _pri
     756                            .asg 00H, _mailbox
     757                            .asg 00H, _arg0
     758                            .asg 00H, _arg1
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   93

     759                            .asg 01H, _dorta
     760 00000200                   SWI_Obj 1, KNL_swi, 0, _function, _pri, _mailbox, _arg0, _arg1, _dorta
1        00000200                   CHK_nargs "SWI_Obj", fxn
1                                   .if ($symcmp("", "error") = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   ;
1                                   ; pri, mailbox, arg0 and arg1 are optional -- defaults if necessary
1                                   ;
1                                   .if ($symlen("00H") = 0)
1                                       .asg        "0", pri
1                                       .asg        "0", mailbox
1                                       .asg        "0", arg0
1                                       .asg        "0", arg1
1                                   .elseif ($symlen("00H") = 0)
1                                       .asg        "0", mailbox
1                                       .asg        "0", arg0
1                                       .asg        "0", arg1
1                                   .elseif ($symlen("00H") = 0)
1                                       .asg        "0", arg0
1                                       .asg        "0", arg1
1                                   .elseif ($symlen("00H") = 0)
1                                       .asg        "0", arg1
1                                   .else
1        00000200                       CHK_nargs "SWI_Obj", arg1
1                                       .if ($symcmp("", "error") = 0)
1                                           .mexit
1                                       .endif
1                                   .endif
1                           
1                                   .if (1 = 0)
1                                       .mexit
1                                   .endif
1                           
1                                   .global KNL_swi, _KNL_run
1                           
1                           KNL_swi  .tag    SWI_Obj
1                           
1        00000000           KNL_swi .usect ".swi", STD_TARGWORDMAUS * 6, STD_TARGWORDMAUS
1                           
1        00000110                   .sect ".cinit"
1                           
1                                   .align 8
1                           
1        00000110 00000018          .field  STD_TARGWORDMAUS * 6
1        00000114 00000000-         .field KNL_swi
1        00000118 FFFFFFFF          .field  -1                      ; lock (not posted)
1        0000011c 00000004!         .field  SWI_D_rdytab+(00H*2+1)*STD_TARGWORDMAUS; ready
1        00000120 00000001          .field  1 << 00H              ; mask
1        00000124 00000000          .field  0                       ; link
1        00000128 00000000          .field  00H               ; initkey
1        0000012c 00000000          .field  00H               ; mailbox
1                           
1        00000130                   FXN_Obj KNL_swi$fxn, _KNL_run, 00H, 00H, ".swi"
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   94

2        00000130               CHK_nargs "FXN_Obj", section
2                               .if ($symcmp("", "error") = 0)
2                                   .emsg "FXN_Obj parameter error"
2                               .endif
2                           
2                           KNL_swi$fxn  .tag    FXN_Obj
2                           
2        00000018           KNL_swi$fxn     .usect ".swi", STD_TARGWORDMAUS * 3, STD_TARGWORDMAUS
2                           
2        00000130                   .sect ".cinit"
2                           
2                                   .align 8
2        00000130 0000000C          .field  STD_TARGWORDMAUS * 3
2        00000134 00000018-         .field KNL_swi$fxn
2        00000138 00000000!         .field  _KNL_run          ; fxn
2        0000013c 00000000          .field  00H         ; arg1
2        00000140 00000000          .field  00H         ; arg0
2                           
1                           
1        00000024           KNL_swi$aaa .usect ".swi", STD_TARGWORDMAUS * 2, STD_TARGWORDMAUS
1                           
1        00000144                   .sect ".cinit"
1                           
1                                   .align 8
1                           
1        00000148 00000008          .field  STD_TARGWORDMAUS * 2
1        0000014c 00000024-         .field KNL_swi$aaa
1        00000150 FFFFFFFF          .field  -1                      ; stslock
1                                   .if 01H
1        00000154 00000004+             .field  KNL_swi$sts          ; pointer to STS_Obj
1                                   .else
1                                       .field 0
1                                   .endif
1                           
1                                   ; only allocate STS object if 'Do RTA' is TRUE
1                                   .if 01H
1        00000158                       STS_Obj 1, KNL_swi$sts, 0, 0, 0
2                           
2        00000158                   CHK_nargs "STS_Obj", prevl
2                           
2                                   .if ($symcmp("", "error") = 0)
2                                       .emsg "STS_Obj parameter error."
2                                   .endif
2                           
2                                   .if (1 = 0)                  ; if this object is not
2                                                                      ; really to be allocated
2                                       .mexit                         ; exit quietly now
2                                   .endif
2                           
2                                   .global KNL_swi$sts, KNL_swi$sts$stsobj     
2                           
2        00000000                   .sect ".sts"                       ; allocate STS_Obj 
2                                                                      ; (in section ".sts")
2                           KNL_swi$sts  .tag    STS_Obj                    ; declare name as having 
2                                                                      ; type STS_Obj
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   95

2        00000000           KNL_swi$sts$stsobj:
2                                                                     ; NOTE: on 32-bit targets
2                                                                     ; only prevh is used
2        00000000 00000000          .long   0                         ; allocate space for previous
2                                                                     ; 32-bit value
2        00000004           KNL_swi$sts                                   
2        00000004 00000000          .long   0                         ; num
2        00000008 00000000          .long   0                         ; acc
2        0000000c 80000000          .long   80000000h                 ; max
2                           
2        00000158                   .sect    ".cinit"
2                                   .align    8
2        00000158 00000010          .field    STD_TARGWORDMAUS * 4
2        0000015c 00000000+         .field    KNL_swi$sts$stsobj                    
2        00000160 00000000          .field    0                  ; allocate space for history   
2        00000164 00000000          .field    0                        ; num
2        00000168 00000000          .field    0                        ; acc
2        0000016c 80000000          .field    80000000h                ; max
2                           
2        00000010                   .sect    ".sts"
2                           
1                                   .endif
1                           
     761                    
     762                    ;; ======== TSK_Obj TSK_idle ========
     763                    ;; This is the idle task; it only runs when no other task is ready
     764                    ;;
     765                    ;; TSK_Obj TSK_idle (iFXN, iARG0, iARG1, iARG2, iARG3, iARG4, iARG5, iARG6, iARG7, iAUTOSTK, iMANSTK, 
     766                            .global TSK_idle
     767                            .asg IDL_F_loop, _iFXN
     768                            .asg 00H, _iARG0
     769                            .asg 00H, _iARG1
     770                            .asg 00H, _iARG2
     771                            .asg 00H, _iARG3
     772                            .asg 00H, _iARG4
     773                            .asg 00H, _iARG5
     774                            .asg 00H, _iARG6
     775                            .asg 00H, _iARG7
     776                            .asg 01H, _iAUTOSTK
     777                            .asg null, _iMANSTK
     778                            .asg 0400H, _iSTKSZ
     779                            .asg ISRAM, _iSTKSEG
     780                            .asg 00H, _iPRI
     781                            .asg 00H, _iENV
     782                            .asg 00H, _iEXITFLAG
     783                            .asg 00H, _iUSETSKNAME
     784                            .asg 00H, _iSTATREG
     785 00000010                   TSK_Obj 1, TSK_idle, 0, _iFXN, _iARG0, _iARG1, _iARG2, _iARG3, _iARG4, _iARG5, _iARG6, _iARG7,
1                           
1                                   .global IDL_F_loop
1                                   .global TSK_idle
1                           
1                                   .if 00H
1                                           .sect   ".const"
1                           TSK$:TSK_idle:  .string ":name:",0      ; null-terminated name string
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   96

1                                   .endif
1                           
1        00000000           TSK_idle$obj    .usect  ".tsk", 3 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1        0000000c           TSK_idle                .usect  ".tsk", 21 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .if     0 > 0
1                           :name:$env      .usect  ".tsk", TSK$num_hooks * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .endif
1                           
1                 00000400  TSK_idle$stklen .set    0400H
1                           
1                                   .if     01H
1                                       ;
1                                       ; Reserve space for automatically allocated stack
1                                       ;
1        00000000           TSK_idle$stack  .usect ".TSK_idle$stk", 0400H, STD_TARGALIGN
1                                           .global TSK_idle$stack, TSK_idle$stackname
1                                           .asg    "TSK_idle$stack", TSK_idle$stackname
1                                   .else
1                                       .if ($symcmp(":manstack:", "null") == 0)
1                                           .emsg "TSK :name: manually allocated stack cannot be null"
1                                       .else
1                                           .asg    ":manstack:", :name:$stackname
1                                       .endif
1                                   .endif
1                           
1                                   ;
1                                   ; stkptr for the idle stack is used by the IDL_F_stub function
1                                   ;
1                                   .global TSK_idle$stkptr
1                           
1                                   .if 01H
1                 00000398- TSK_idle$stkptr .set TSK_idle$stack + 0400H - STD_TARGALIGN - (24 * STD_TARGWORDMAUS)
1                                   .else
1                                           .asg "(:name:$stackname + :stacksize: - STD_TARGALIGN - (TSK_USEDSTACK * STD_TARGWORDM
1                                   .endif
1                           
1        00000170                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        00000170 00000060          .word   24 * STD_TARGWORDMAUS, TSK_idle$obj
         00000174 00000000-
1                           
1        00000178                   OBJ_Obj TSK_idle, OBJ_TSK, (TSK_CORESIZE + TSK$num_hooks)       ; allocates 3 words
2                           
2                           ;
2                           ;  OBJ_SEM 
2                           ;
2                           
2                                   .if OBJ_TSK == OBJ_SEM
2                           
2                                       .if SEM$NUMOF != SEM$sernum
2                                           ; next points to next object
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2                                           .word OBJ_TAB_SEM               ; next points back to OBJ_table
2                                       .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   97

2                           
2                                       .word       OBJ_sem$prev            ; previous object or OBJ_table
2                           
2                                       .word       :type: | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
2                                       ;
2                                       .asg ":name:$obj", OBJ_sem$prev
2                           
2                                       .if SEM$sernum = 1                  ; first TSK Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg ":name:$obj", OBJ_sem$next
2                                       .endif
2                           
2                                       .eval       SEM$sernum+1, SEM$sernum
2                           
2                           ;
2                           ;  OBJ_SWI
2                           ;
2                            
2                                   .elseif OBJ_TSK == OBJ_SWI
2                            
2                                       .if SWI$NUMOF != SWI$sernum         ; if not the last SWI Obj
2                                           ; next points to next SWI Obj
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2                                           .word   OBJ_TAB_SWI             ; next points back to OBJ_table
2                                       .endif
2                                    
2                                       .word       OBJ_swi$prev            ; previous object or OBJ_table
2                           
2                                       .word       :type: | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
2                                       ;
2                                       .asg        ":name:$obj", OBJ_swi$prev
2                           
2                                       .if SWI$sernum = 1                  ; first SWI Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg ":name:$obj", OBJ_swi$next  ; "next" field of OBJ_table
2                                       .endif
2                           
2                                       .eval       SWI$sernum+1, SWI$sernum
2                           
2                           
2                           ;
2                           ;  OBJ_TSK 
2                           ;
2                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   98

2                                   .elseif OBJ_TSK == OBJ_TSK
2                           
2                                       .if TSK$NUMOF != 1          ; if not the last TSK Obj
2                                           ; next points to next TSK Obj
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2        00000178 00000028-                 .word   _OBJ_table + 4 * STD_TARGWORDMAUS               ; next points back to OBJ_tabl
2                                       .endif
2                                   
2        0000017c 00000028-             .word       _OBJ_table + 4 * STD_TARGWORDMAUS               ; previous object or OBJ_table
2                           
2        00000180 0000ABC2              .word       OBJ_TSK | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
2                                       ;
2                                       .asg        "TSK_idle$obj", OBJ_tsk$prev
2                           
2                                       .if 1 = 1                   ; first TSK Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg "TSK_idle$obj", OBJ_tsk$next       ; "next" field of OBJ_table
2                                       .endif
2                           
2                                       .eval       1+1, TSK$sernum
2                           
2                           ;
2                           ;  OBJ_MBX 
2                           ;
2                                   .elseif OBJ_TSK == OBJ_MBX
2                           
2                                       .if MBX$NUMOF != MBX$sernum         ; if not the last MBX Obj
2                                           ; next points to next object
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2                                           .word   OBJ_TAB_MBX             ; next points back to OBJ_table
2                                       .endif
2                                   
2                                       .word       OBJ_mbx$prev            ; previous object or OBJ_table
2                           
2                                       .word       :type: | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
2                                       ;
2                                       .asg        ":name:$obj", OBJ_mbx$prev
2                           
2                                       .if MBX$sernum = 1                  ; first MBX Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg ":name:$obj", OBJ_mbx$next
2                                       .endif
2                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE   99

2                                       .eval       MBX$sernum+1, MBX$sernum
2                           
2                           ;
2                           ;  OBJ_SIO 
2                           ;
2                                   .elseif OBJ_TSK == OBJ_SIO
2                           
2                                       .if (SIO$NUMOF != SIO$sernum)
2                                           ; next points to next object
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2                                           .word   OBJ_TAB_SIO             ; next points back to OBJ_table
2                                       .endif
2                           
2                                       .word       OBJ_sio$prev            ; previous object or OBJ_table
2                           
2                                       .word       :type: | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
2                                       ;
2                                       .asg ":name:$obj", OBJ_sio$prev
2                           
2                                       .if SIO$sernum = 1                  ; first SIO Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg ":name:$obj", OBJ_sio$next
2                                       .endif
2                           
2                                       .eval       SIO$sernum+1, SIO$sernum
2                           
2                           ;
2                           ;  OBJ_DEV 
2                           ;
2                                   .elseif OBJ_TSK == OBJ_DEV
2                                      
2                                       ; DEV_Device entry in OBJ table is sum of all the DEV_Device entry
2                                       ; that get created. These entries are created from UDEV, DGN, DHL
2                                       ; DPI and DIO. 
2                                       ; Sum of devices is provided by DEV$NUMDEVICES symbol(from cfg.xx)
2                           
2                                       .if DEV$NUMDEVICES != DEV$sernum
2                                           ; next points to next object
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2                                           .word   OBJ_TAB_DEV             ; next points back to OBJ_table
2                                       .endif
2                           
2                                       .word       OBJ_dev$prev            ; previous object or OBJ_table
2                           
2                                       .word       :type: | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  100

2                                       ;
2                                       ; Below assignment is different from other OBJ modules. 
2                                       ; This is because in case of OBJ_DEV OBJ_cinitObj is passed
2                                       ; with :name:$obj itself. For example 'DGN_printData$obj', Note
2                                       ; that here we can't pass 'DGN_printData' to this macro
2                                       ; Because 'DGN_printData' is a string allocated in .const section
2                                       ; by driver macro(DGN_Obj). But this OBJ header needs to point
2                                       ; wherever DEV_Device, i.e., 'DGN_printData$obj' is allocated and
2                                       ; not string 'DGN_printData'
2                           
2                                       .asg ":name:", OBJ_dev$prev
2                           
2                                       .if DEV$sernum = 1                  ; first DEV_Device Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg ":name:", OBJ_dev$next
2                                       .endif
2                           
2                                       .eval       DEV$sernum+1, DEV$sernum
2                           
2                           
2                           ;
2                           ;  OBJ_BUF 
2                           ;
2                                   .elseif OBJ_TSK == OBJ_BUF
2                           
2                                       .if (BUF$NUMOF != BUF$sernum)
2                                           ; next points to next object
2                                           .word   :name: + :size: * STD_TARGWORDMAUS
2                                       .else
2                                           .word   OBJ_TAB_BUF             ; next points back to OBJ_table
2                                       .endif
2                           
2                                       .word       OBJ_buf$prev            ; previous object or OBJ_table
2                           
2                                       .word       :type: | OBJ_KEY
2                           
2                                       ;
2                                       ; For next obj, this one is prev
2                                       ;
2                                       .asg ":name:$obj", OBJ_buf$prev
2                           
2                                       .if BUF$sernum = 1                  ; first BUF Obj
2                                           ;
2                                           ; If this is the first element, queue head will point to this
2                                           ;
2                                           .asg ":name:$obj", OBJ_buf$next
2                                       .endif
2                                       
2                                       .eval       BUF$sernum+1, BUF$sernum
2                                   
2                                   .else
2                           
2                                       .emsg "OBJ_Obj: :name: passed invalid type :type:"
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  101

2                           
2                                   .endif
2                           
1                           
1        00000184 0000000C-         .word   TSK_idle, TSK_idle                      ; kobj.ready
         00000188 0000000C-
1        0000018c 00000014-         .word   TSK_idle+2*STD_TARGWORDMAUS, TSK_idle+2*STD_TARGWORDMAUS        ; kobj.alarm
         00000190 00000014-
1        00000194 0000001C-         .word   TSK_idle+4*STD_TARGWORDMAUS, TSK_idle+4*STD_TARGWORDMAUS        ; kobj.setpri
         00000198 0000001C-
1                           
1                                   ;
1                                   ; GCONF gives priority of 0ffffffffh for -1, so we need to translate
1                                   ; since the assembler treats 0ffffffffh as unsigned
1                                   ;
1                                   .if 00H = 0ffffffffh
1                                       .eval       -1, local_priority
1                                   .else
1                                       .eval       00H, local_priority
1                                   .endif
1                           
1                                   .if 0 < 0
1                                       ;
1                                       ;  KNL_queues[3] is _KNL_inactive queue. All terminated and
1                                       ;  negative priority tasks go here.
1                                       ;
1                                       .word       _KNL_queues+3*2*STD_TARGWORDMAUS        ; kobj.queue = _KNL_inactive
1                                       .word       local_priority          ; kobj.priority
1                                       .word       0                       ; kobj.mask
1                                   .else
1                                       ;
1                                       ; KNL_priority[priority]
1                                       ;
1        0000019c 00000020!             .word       _KNL_queues+(0+4)*2*STD_TARGWORDMAUS
1                           
1        000001a0 00000000              .word       0               ; kobj.priority
1        000001a4 00000001              .word       1<<0    ; kobj.mask
1                                   .endif
1                           
1        000001a8 00000398-         .word   TSK_idle$stkptr         ; kobj.sp
1                           
1        000001ac 00000000          .word   0                       ; kobj.timeout
1        000001b0 00000000          .word   0                       ; kobj.mode
1                           
1                                   .if GBL_ENABLEINST
1                                       .word       :name:$sts      ; kobj.sts
1                                   .else
1        000001b4 00000000              .word       0
1                                   .endif
1                           
1        000001b8 00000000          .short  0                       ; kobj.signalled
1                                   .align  STD_TARGWORDMAUS
1                           
1                                   ;
1                                   ;  stack - This field is only used by TSK_checkstacks to
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  102

1                                   ;  verify that the task stack is still valid.  It always
1                                   ;  points to the top (lowest address) of the task's stack.
1                                   ;
1        000001bc 00000000-         .word   TSK_idle$stack
1        000001c0 00000400          .word   0400H
1        000001c4 00000014-         .word   ISRAM           
1                           
1                           
1                                   ;
1                                   ;  Set up pointer to task's name or NULL
1                                   ;
1                                   .if     00H
1                                           .word   TSK$:name:              ; name
1                                   .else
1        000001c8 00000000                  .word   0
1                                   .endif
1                           
1                                   .if     0 == 0
1        000001cc 00000000              .word       00H                     ; environ
1                                   .else
1                                       .word       :name:$env
1                                   .endif
1                           
1        000001d0 00000000          .word   0                       ; errno
1        000001d4 00000000          .short  00H
1                                   .align  STD_TARGWORDMAUS                        ; short followed by word could misalign
1                           
1                                   ; End of TSK_Obj structure;
1                           
1                                   .if GBL_ENABLEINST
1                                       STS_Obj     1, :name:$sts, 0, 0, 0
1                                   .endif
1                           
1                                   .if $symcmp("IDL_F_loop", "_SYS_nop") = 0
1                                       .wmsg "Task :name: is being created to run :fxn:"
1                                   .endif
1                           
1                                   .if     0 > 0
1                                       .sect       ".cinit"
1                                       .align      STD_TARGALIGN
1                                       .word       1 * STD_TARGWORDMAUS
1                                       .word       :name:$env + (HOOK$knl_index * (1 * STD_TARGWORDMAUS))
1                                       .word       :envp:
1                                   .endif
1                           
1                           
1                                   ;
1                                   ; generate a cinit record that will initialize the tasks's stack
1                                   ;
1        000001d8                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1                           
1                                   ;
1                                   ; TSK_idle$stkptr points one word *below* stack frame, so add 1 word
1                                   ; to the base address of the cinit record
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  103

1                                   ;
1        000001d8 00000060          .word   24 * STD_TARGWORDMAUS, TSK_idle$stkptr + (1 * STD_TARGWORDMAUS)
         000001dc 0000039C-
1                           
1        000001e0 00000000          .word   0
1        000001e4 00000000          .word   00H
1        000001e8 00000000!         .word   _KNL_exit
1        000001ec 00000000          .word   0
1        000001f0 00000000!         .word   KNL_glue
1                                   ;
1                                   ; TSK_USEDSTACK is the total number of words in the startup
1                                   ; stack.  There are 15 words that are set explicitly, leaving
1                                   ; TSK_USEDSTACK - 15 words for which we need to leave space here.
1                                   ;
1                           
1                                   ; The .space directive for the C6x indicates bytes
1                           
1        000001f4                   .space  (24 - 15) * STD_TARGWORDMAUS    ; 4 bytes per word
1                           
1                                   .eval   0, strCount$save
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        00000218 00000000              .word 00H
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        0000021c 00000000              .word 00H
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        00000220 00000000              .word 00H
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        00000224 00000000              .word 00H
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  104

1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        00000228 00000000              .word 00H
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        0000022c 00000000              .word 00H
1                                   .endif
1                           
1                           ;
1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1                           ;
1                           ;  Be careful with this little island of non-arg code!
1                           
1        00000230 00000000!         .word   IDL_F_loop
1        00000234 00000000!         .word   _TSK_exit
1                           
1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        00000238 00000000              .word 00H
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .word       TSK$string:TSK$strCount:
1                                       .eval       TSK$strCount+1, TSK$strCount
1                                   .else
1        0000023c 00000000              .word 00H
1                                   .endif
1                           
1                                   ;
1                                   ; Create a record to fill unused portion of stack with stackstamp
1                                   ; Format: sequence of 3 words; <count, address, fill-value>
1                                   ;
1        0000000c                   .sect ".gblinit"
1        0000000c 000000E7          .word   ((TSK_idle$stkptr - TSK_idle$stack) / STD_TARGWORDMAUS) + 1     ; count
1        00000010 00000000-         .word   TSK_idle$stack
1        00000014 BEBEBEBE          .word   0xbebebebe 
1                           
1                           
1                                   ;
1                                   ; Finally, let TSK_idle point to the right location
1                                   ;
1                                   .asg "TSK_idle$base + OBJ_HDRSIZE * STD_TARGWORDMAUS", TSK_idle
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  105

1                                   ;
1                                   ; Conditionally set up strings for arguments
1                                   ;
1                                   .eval   0, TSK$strCount
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg0(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg1(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg2(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg3(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg4(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg5(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg6(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
1                                   .eval $symlen("00H"),arglen
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  106

1                                   .if $symcmp("0","'") = 0 & $symcmp("H","'") = 0
1                                       .sect ".const"
1                           TSK$string:0:   .string ":arg7(2,arglen-2):",0
1                                       .eval TSK$strCount+1, TSK$strCount
1                                   .endif
1                           
     786                    
     787                    ;; ======== LOG_Obj LOG_system ========
     788                    ;; This object is required by the system to accumulate execution trace information
     789                    ;;
     790                    ;; LOG_Obj LOG_system (bufseg, buflen, logtype)
     791                            .global LOG_system
     792                            .asg ISRAM, _bufseg
     793                            .asg 0400H, _buflen
     794                            .asg "circular", _logtype
     795 00000018                   LOG_Obj 1, LOG_system, 0, _bufseg, _buflen, _logtype
1        00000018                   CHK_domain LOG_Obj, mode, "circular,fixed", "circular"
2                           
1                                   .asg "circular", mode
1                                   .if ($isdefed("LOG_NOOP") = 1)
1                                       .mexit
1                               .elseif ($symcmp("circular", "error") = 0)
1                                   .emsg "LOG_Obj mode error."
1                                   .endif
1                           
1                                   .global LOG_system$buf
1                                   .global LOG_system$size
1                           
1                                   .var    bufbeg
1                                   .var    flag
1                                   .if ((1 != 0) & (0400H > 0))
1                                       .if (((0400H - 1) & 0400H) != 0)
1                                           .emsg   "The LOG :name: buffer size must be a power of 2"
1                                       .endif
1                           
1                                       .asg        0, flag         ; enable LOG
1                                       .asg        "LOG_system$buf", bufbeg
1                           
1                                                                  ;
1                                                                  ; place log buffers into 
1                                                                                                      ; .log0, .log1, etc. sectio
1                                       
1        00000018                       GBL_Obj     LOG_system$buf, buflen, ".LOG_system$buf", "noalign", -1, 1
2        00000018                   CHK_domain "GBL_Obj", alignFlag, "noalign,align", "noalign"
3                           
2                                   .if ($symcmp("noalign", "error") = 0)
2                                       .emsg "GBL_Obj align parameter error."
2                                   .endif
2                                   .asg "noalign", alignFlag
2                           
2        00000018                   CHK_nargs "GBL_Obj", size
2                                   .if ($symcmp("", "error") = 0)
2                                       .emsg "GBL_Obj size parameter error."
2                                   .endif
2                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  107

2                                   .if ($symlen(section) = 0)
2                                       .asg ".bss", section
2                                   .endif
2                           
2                                   .if ($symlen(fillValue) != 0)
2        00000018                       .sect ".gblinit"
2        00000018 00000400              .word 0400H
2        0000001c 00000000-             .word LOG_system$buf
2        00000020 FFFFFFFF              .word -1
2                                   .endif
2                           
2                                   .if (($symcmp(section, ".data") = 0) | ($symcmp(alignFlag, "align") = 0))
2                                       .sect ":section:"
2                                       .if ($symcmp(alignFlag, "align") = 0)
2                                           .align  :alignValue:
2                                       .endif
2                           :name::
2                                       ;
2                                       ; Can't use .space directive here because it reserves
2                                       ; bits for some processors and bytes for others.
2                                       ;
2                                       .loop       :size:
2                                           .word 0
2                                       .endloop
2                           
2                                   .elseif ($symcmp(".LOG_system$buf", ".bss") = 0)
2                                       .bss :name:, :size: * (STD_TARGWORDMAUS / STD_TARGCHARMAUS), (STD_TARGWORDMAUS / STD_TARGC
2                                   .else
2        00000000           LOG_system$buf:     .usect ".LOG_system$buf", 0400H * (STD_TARGWORDMAUS / STD_TARGCHARMAUS), (STD_TARG
2                                   .endif
2                           
1                           
1                 00000400  LOG_system$size .set        0400H
1                           
1                                   .else
1                                       .asg        1, flag         ; disable LOG
1                                       .asg        0, bufbeg
1                           :name:$buf  .set        0
1                           :name:$size .set        0
1                                   .endif
1                           
1        00000000                   .sect ".log"                    ; place all LOG objects in
1                                                                   ; ".log"
1                                   .global LOG_system                  ; make name globally visable
1                           LOG_system  .tag    LOG_Obj                 ; declare name as having type
1                                                                   ; LOG_Obj
1                           
1        00000000           LOG_system                                  ; allocate and initialize 
1                                                                   ; LOG_Obj (in current section)
1                           
1        00000000 00000000          .word    0                      ; bufend 
1        00000004 00000000          .word    0                      ; flag
1        00000008 00000000          .word    0                      ; seqnum 
1        0000000c 00000000          .word    0                      ; curptr
1        00000010 00000000          .word    0                      ; lenmask 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  108

1        00000014 00000000          .word    0                      ; bufbeg
1                           
1        00000240                   .sect ".cinit"
1                                   .align  8
1        00000240 00000018          .field  STD_TARGWORDMAUS * 6
1        00000244 00000000+         .field  LOG_system    
1                               .if ($symcmp("circular", "fixed") = 0)    ; if (mode == "fixed")
1                                   .field  :bufbeg:+(:buflen: * STD_TARGWORDMAUS)-1 ; bufend = bufbeg+buflen-1
1                               .else                               ; else
1        00000248 00000000          .field  0                       ;    bufend = 0
1                               .endif
1        0000024c 00000000          .field  0                  ; flag
1        00000250 00000000          .field  0                       ; seqnum = 0
1        00000254 00000000-         .field  LOG_system$buf                ; curptr
1                                                                   ; lenmask (= buflen-1)
1        00000258 00000FFF          .field  (0400H * STD_TARGWORDMAUS)-1
1        0000025c 00000000-         .field  LOG_system$buf                ; bufbeg
1        00000018               .sect    ".log"
1                           
     796                    
     797                    ;; ======== LOG_Obj trace ========
     798                    ;; <add comments here>
     799                    ;;
     800                    ;; LOG_Obj trace (bufseg, buflen, logtype)
     801                            .global trace
     802                            .asg ISRAM, _bufseg
     803                            .asg 0400H, _buflen
     804                            .asg "circular", _logtype
     805 00000018                   LOG_Obj 1, trace, 0, _bufseg, _buflen, _logtype
1        00000018                   CHK_domain LOG_Obj, mode, "circular,fixed", "circular"
2                           
1                                   .asg "circular", mode
1                                   .if ($isdefed("LOG_NOOP") = 1)
1                                       .mexit
1                               .elseif ($symcmp("circular", "error") = 0)
1                                   .emsg "LOG_Obj mode error."
1                                   .endif
1                           
1                                   .global trace$buf
1                                   .global trace$size
1                           
1                                   .var    bufbeg
1                                   .var    flag
1                                   .if ((1 != 0) & (0400H > 0))
1                                       .if (((0400H - 1) & 0400H) != 0)
1                                           .emsg   "The LOG :name: buffer size must be a power of 2"
1                                       .endif
1                           
1                                       .asg        0, flag         ; enable LOG
1                                       .asg        "trace$buf", bufbeg
1                           
1                                                                  ;
1                                                                  ; place log buffers into 
1                                                                                                      ; .log0, .log1, etc. sectio
1                                       
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  109

1        00000018                       GBL_Obj     trace$buf, buflen, ".trace$buf", "noalign", -1, 1
2        00000018                   CHK_domain "GBL_Obj", alignFlag, "noalign,align", "noalign"
3                           
2                                   .if ($symcmp("noalign", "error") = 0)
2                                       .emsg "GBL_Obj align parameter error."
2                                   .endif
2                                   .asg "noalign", alignFlag
2                           
2        00000018                   CHK_nargs "GBL_Obj", size
2                                   .if ($symcmp("", "error") = 0)
2                                       .emsg "GBL_Obj size parameter error."
2                                   .endif
2                           
2                                   .if ($symlen(section) = 0)
2                                       .asg ".bss", section
2                                   .endif
2                           
2                                   .if ($symlen(fillValue) != 0)
2        00000024                       .sect ".gblinit"
2        00000024 00000400              .word 0400H
2        00000028 00000000-             .word trace$buf
2        0000002c FFFFFFFF              .word -1
2                                   .endif
2                           
2                                   .if (($symcmp(section, ".data") = 0) | ($symcmp(alignFlag, "align") = 0))
2                                       .sect ":section:"
2                                       .if ($symcmp(alignFlag, "align") = 0)
2                                           .align  :alignValue:
2                                       .endif
2                           :name::
2                                       ;
2                                       ; Can't use .space directive here because it reserves
2                                       ; bits for some processors and bytes for others.
2                                       ;
2                                       .loop       :size:
2                                           .word 0
2                                       .endloop
2                           
2                                   .elseif ($symcmp(".trace$buf", ".bss") = 0)
2                                       .bss :name:, :size: * (STD_TARGWORDMAUS / STD_TARGCHARMAUS), (STD_TARGWORDMAUS / STD_TARGC
2                                   .else
2        00000000           trace$buf:     .usect ".trace$buf", 0400H * (STD_TARGWORDMAUS / STD_TARGCHARMAUS), (STD_TARGWORDMAUS /
2                                   .endif
2                           
1                           
1                 00000400  trace$size .set        0400H
1                           
1                                   .else
1                                       .asg        1, flag         ; disable LOG
1                                       .asg        0, bufbeg
1                           :name:$buf  .set        0
1                           :name:$size .set        0
1                                   .endif
1                           
1        00000018                   .sect ".log"                    ; place all LOG objects in
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  110

1                                                                   ; ".log"
1                                   .global trace                  ; make name globally visable
1                           trace  .tag    LOG_Obj                 ; declare name as having type
1                                                                   ; LOG_Obj
1                           
1        00000018           trace                                  ; allocate and initialize 
1                                                                   ; LOG_Obj (in current section)
1                           
1        00000018 00000000          .word    0                      ; bufend 
1        0000001c 00000000          .word    0                      ; flag
1        00000020 00000000          .word    0                      ; seqnum 
1        00000024 00000000          .word    0                      ; curptr
1        00000028 00000000          .word    0                      ; lenmask 
1        0000002c 00000000          .word    0                      ; bufbeg
1                           
1        00000260                   .sect ".cinit"
1                                   .align  8
1        00000260 00000018          .field  STD_TARGWORDMAUS * 6
1        00000264 00000018+         .field  trace    
1                               .if ($symcmp("circular", "fixed") = 0)    ; if (mode == "fixed")
1                                   .field  :bufbeg:+(:buflen: * STD_TARGWORDMAUS)-1 ; bufend = bufbeg+buflen-1
1                               .else                               ; else
1        00000268 00000000          .field  0                       ;    bufend = 0
1                               .endif
1        0000026c 00000000          .field  0                  ; flag
1        00000270 00000000          .field  0                       ; seqnum = 0
1        00000274 00000000-         .field  trace$buf                ; curptr
1                                                                   ; lenmask (= buflen-1)
1        00000278 00000FFF          .field  (0400H * STD_TARGWORDMAUS)-1
1        0000027c 00000000-         .field  trace$buf                ; bufbeg
1        00000030               .sect    ".log"
1                           
     806                    
     807                    ;; ======== STS_Obj stsCycleTime ========
     808                    ;; <add comments here>
     809                    ;;
     810                    ;; STS_Obj stsCycleTime (prev, prevlow)
     811                            .global stsCycleTime
     812                            .asg 00H, _prev
     813                            .asg 00H, _prevlow
     814 00000030                   STS_Obj 1, stsCycleTime, 0, _prev, _prevlow
1                           
1        00000030                   CHK_nargs "STS_Obj", prevl
1                           
1                                   .if ($symcmp("", "error") = 0)
1                                       .emsg "STS_Obj parameter error."
1                                   .endif
1                           
1                                   .if (1 = 0)                  ; if this object is not
1                                                                      ; really to be allocated
1                                       .mexit                         ; exit quietly now
1                                   .endif
1                           
1                                   .global stsCycleTime, stsCycleTime$stsobj     
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  111

1        00000010                   .sect ".sts"                       ; allocate STS_Obj 
1                                                                      ; (in section ".sts")
1                           stsCycleTime  .tag    STS_Obj                    ; declare name as having 
1                                                                      ; type STS_Obj
1        00000010           stsCycleTime$stsobj:
1                                                                     ; NOTE: on 32-bit targets
1                                                                     ; only prevh is used
1        00000010 00000000          .long   0                         ; allocate space for previous
1                                                                     ; 32-bit value
1        00000014           stsCycleTime                                   
1        00000014 00000000          .long   0                         ; num
1        00000018 00000000          .long   0                         ; acc
1        0000001c 80000000          .long   80000000h                 ; max
1                           
1        00000280                   .sect    ".cinit"
1                                   .align    8
1        00000280 00000010          .field    STD_TARGWORDMAUS * 4
1        00000284 00000010+         .field    stsCycleTime$stsobj                    
1        00000288 00000000          .field    00H                  ; allocate space for history   
1        0000028c 00000000          .field    0                        ; num
1        00000290 00000000          .field    0                        ; acc
1        00000294 80000000          .field    80000000h                ; max
1                           
1        00000020                   .sect    ".sts"
1                           
     815                    
     816                    ;; ======== STS_Obj stsDispTime ========
     817                    ;; <add comments here>
     818                    ;;
     819                    ;; STS_Obj stsDispTime (prev, prevlow)
     820                            .global stsDispTime
     821                            .asg 00H, _prev
     822                            .asg 00H, _prevlow
     823 00000020                   STS_Obj 1, stsDispTime, 0, _prev, _prevlow
1                           
1        00000020                   CHK_nargs "STS_Obj", prevl
1                           
1                                   .if ($symcmp("", "error") = 0)
1                                       .emsg "STS_Obj parameter error."
1                                   .endif
1                           
1                                   .if (1 = 0)                  ; if this object is not
1                                                                      ; really to be allocated
1                                       .mexit                         ; exit quietly now
1                                   .endif
1                           
1                                   .global stsDispTime, stsDispTime$stsobj     
1                           
1        00000020                   .sect ".sts"                       ; allocate STS_Obj 
1                                                                      ; (in section ".sts")
1                           stsDispTime  .tag    STS_Obj                    ; declare name as having 
1                                                                      ; type STS_Obj
1        00000020           stsDispTime$stsobj:
1                                                                     ; NOTE: on 32-bit targets
1                                                                     ; only prevh is used
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  112

1        00000020 00000000          .long   0                         ; allocate space for previous
1                                                                     ; 32-bit value
1        00000024           stsDispTime                                   
1        00000024 00000000          .long   0                         ; num
1        00000028 00000000          .long   0                         ; acc
1        0000002c 80000000          .long   80000000h                 ; max
1                           
1        00000298                   .sect    ".cinit"
1                                   .align    8
1        00000298 00000010          .field    STD_TARGWORDMAUS * 4
1        0000029c 00000020+         .field    stsDispTime$stsobj                    
1        000002a0 00000000          .field    00H                  ; allocate space for history   
1        000002a4 00000000          .field    0                        ; num
1        000002a8 00000000          .field    0                        ; acc
1        000002ac 80000000          .field    80000000h                ; max
1                           
1        00000030                   .sect    ".sts"
1                           
     824                    
     825                    ;; ======== STS_Obj stsExeTimeChJpegDec ========
     826                    ;; <add comments here>
     827                    ;;
     828                    ;; STS_Obj stsExeTimeChJpegDec (prev, prevlow)
     829                            .global stsExeTimeChJpegDec
     830                            .asg 00H, _prev
     831                            .asg 00H, _prevlow
     832 00000030                   STS_Obj 1, stsExeTimeChJpegDec, 0, _prev, _prevlow
1                           
1        00000030                   CHK_nargs "STS_Obj", prevl
1                           
1                                   .if ($symcmp("", "error") = 0)
1                                       .emsg "STS_Obj parameter error."
1                                   .endif
1                           
1                                   .if (1 = 0)                  ; if this object is not
1                                                                      ; really to be allocated
1                                       .mexit                         ; exit quietly now
1                                   .endif
1                           
1                                   .global stsExeTimeChJpegDec, stsExeTimeChJpegDec$stsobj     
1                           
1        00000030                   .sect ".sts"                       ; allocate STS_Obj 
1                                                                      ; (in section ".sts")
1                           stsExeTimeChJpegDec  .tag    STS_Obj                    ; declare name as having 
1                                                                      ; type STS_Obj
1        00000030           stsExeTimeChJpegDec$stsobj:
1                                                                     ; NOTE: on 32-bit targets
1                                                                     ; only prevh is used
1        00000030 00000000          .long   0                         ; allocate space for previous
1                                                                     ; 32-bit value
1        00000034           stsExeTimeChJpegDec                                   
1        00000034 00000000          .long   0                         ; num
1        00000038 00000000          .long   0                         ; acc
1        0000003c 80000000          .long   80000000h                 ; max
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  113

1        000002b0                   .sect    ".cinit"
1                                   .align    8
1        000002b0 00000010          .field    STD_TARGWORDMAUS * 4
1        000002b4 00000030+         .field    stsExeTimeChJpegDec$stsobj                    
1        000002b8 00000000          .field    00H                  ; allocate space for history   
1        000002bc 00000000          .field    0                        ; num
1        000002c0 00000000          .field    0                        ; acc
1        000002c4 80000000          .field    80000000h                ; max
1                           
1        00000040                   .sect    ".sts"
1                           
     833                    
     834                    ;; ======== STS_Obj stsExeTimeChJpegEnc ========
     835                    ;; <add comments here>
     836                    ;;
     837                    ;; STS_Obj stsExeTimeChJpegEnc (prev, prevlow)
     838                            .global stsExeTimeChJpegEnc
     839                            .asg 00H, _prev
     840                            .asg 00H, _prevlow
     841 00000040                   STS_Obj 1, stsExeTimeChJpegEnc, 0, _prev, _prevlow
1                           
1        00000040                   CHK_nargs "STS_Obj", prevl
1                           
1                                   .if ($symcmp("", "error") = 0)
1                                       .emsg "STS_Obj parameter error."
1                                   .endif
1                           
1                                   .if (1 = 0)                  ; if this object is not
1                                                                      ; really to be allocated
1                                       .mexit                         ; exit quietly now
1                                   .endif
1                           
1                                   .global stsExeTimeChJpegEnc, stsExeTimeChJpegEnc$stsobj     
1                           
1        00000040                   .sect ".sts"                       ; allocate STS_Obj 
1                                                                      ; (in section ".sts")
1                           stsExeTimeChJpegEnc  .tag    STS_Obj                    ; declare name as having 
1                                                                      ; type STS_Obj
1        00000040           stsExeTimeChJpegEnc$stsobj:
1                                                                     ; NOTE: on 32-bit targets
1                                                                     ; only prevh is used
1        00000040 00000000          .long   0                         ; allocate space for previous
1                                                                     ; 32-bit value
1        00000044           stsExeTimeChJpegEnc                                   
1        00000044 00000000          .long   0                         ; num
1        00000048 00000000          .long   0                         ; acc
1        0000004c 80000000          .long   80000000h                 ; max
1                           
1        000002c8                   .sect    ".cinit"
1                                   .align    8
1        000002c8 00000010          .field    STD_TARGWORDMAUS * 4
1        000002cc 00000040+         .field    stsExeTimeChJpegEnc$stsobj                    
1        000002d0 00000000          .field    00H                  ; allocate space for history   
1        000002d4 00000000          .field    0                        ; num
1        000002d8 00000000          .field    0                        ; acc
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  114

1        000002dc 80000000          .field    80000000h                ; max
1                           
1        00000050                   .sect    ".sts"
1                           
     842                    
     843                    ;; ======== STS_Obj stsCapTime ========
     844                    ;; <add comments here>
     845                    ;;
     846                    ;; STS_Obj stsCapTime (prev, prevlow)
     847                            .global stsCapTime
     848                            .asg 00H, _prev
     849                            .asg 00H, _prevlow
     850 00000050                   STS_Obj 1, stsCapTime, 0, _prev, _prevlow
1                           
1        00000050                   CHK_nargs "STS_Obj", prevl
1                           
1                                   .if ($symcmp("", "error") = 0)
1                                       .emsg "STS_Obj parameter error."
1                                   .endif
1                           
1                                   .if (1 = 0)                  ; if this object is not
1                                                                      ; really to be allocated
1                                       .mexit                         ; exit quietly now
1                                   .endif
1                           
1                                   .global stsCapTime, stsCapTime$stsobj     
1                           
1        00000050                   .sect ".sts"                       ; allocate STS_Obj 
1                                                                      ; (in section ".sts")
1                           stsCapTime  .tag    STS_Obj                    ; declare name as having 
1                                                                      ; type STS_Obj
1        00000050           stsCapTime$stsobj:
1                                                                     ; NOTE: on 32-bit targets
1                                                                     ; only prevh is used
1        00000050 00000000          .long   0                         ; allocate space for previous
1                                                                     ; 32-bit value
1        00000054           stsCapTime                                   
1        00000054 00000000          .long   0                         ; num
1        00000058 00000000          .long   0                         ; acc
1        0000005c 80000000          .long   80000000h                 ; max
1                           
1        000002e0                   .sect    ".cinit"
1                                   .align    8
1        000002e0 00000010          .field    STD_TARGWORDMAUS * 4
1        000002e4 00000050+         .field    stsCapTime$stsobj                    
1        000002e8 00000000          .field    00H                  ; allocate space for history   
1        000002ec 00000000          .field    0                        ; num
1        000002f0 00000000          .field    0                        ; acc
1        000002f4 80000000          .field    80000000h                ; max
1                           
1        00000060                   .sect    ".sts"
1                           
     851                    
     852                    ;; MODULE INITIALIZATION
     853 00000000                   .sect ".sysinit"
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  115

     854                            .global BIOS_init, _BIOS_init
     855 00000000           BIOS_init:
     856 00000000           _BIOS_init:
     857 00000000                   GBL_preamble
1        00000000 01BC54F6          stw     b3, *b15--[2]
1                           
     858 00000004                   GBL_init
1                           
1                                   ; call GBL_F_version
1        00000004 0180002A!         mvkl    GBL_F_version, b3
1        00000008 0180006A!         mvkh    GBL_F_version, b3
1        0000000c 000C0362          b b3
1        00000010 01800E2A+         mvkl versret?,b3
1        00000014 0180006A+         mvkh versret?,b3
1        00000018 00004000          nop 3 
1        0000001c           versret?:
1        0000001c 00824828          mvkl    GBL_A_VERSION, a1
1        00000020 00800068          mvkh    GBL_A_VERSION, a1
1                            
1        00000024 009028C0          sub a4,a1,a1
1        00000028 00840A58          cmpeq a1,0,a1
1                           
1        0000002c           selfspin? 
1                           
1        0000002c 90000192   [!a1]  b selfspin? 
1                           
1                                   ; only call user init function if non-zero
1                                   .if (GBL_USERINIT != 0)
1                                   ; USERINITFXN below is defined in GBL_config
1        00000030 0180002A!             mvkl _dm642_init, b3
1        00000034 0180006A!             mvkh _dm642_init, b3
1        00000038 000C0362              b b3
1        0000003c 0180242A+             mvkl ginit?, b3
1        00000040 0180006A+             mvkh ginit?, b3
1        00000044 00004000              nop 3
1                           ginit?:
1                                   .endif
1                           
1                                   .global HWI_A_VECS
1                           
1        00000048 00000028!         mvkl HWI_A_VECS,a0
1        0000004c 00000068!         mvkh HWI_A_VECS,a0
1        00000050 028013A2          mvc a0,istp                 ; load interrupt service table pointer
1                           
1        00000054 00000028          mvkl HWI_REGS,a0            ; load addr of Interrupt Selector Regs
1        00000058 0000CE68          mvkh HWI_REGS,a0
1                           
1        0000005c 009CD1AA          mvkl HWI_INTRMULTHIGH,b1    ; Value for Interrupt Multiplexer High
1        00000060 0084106A          mvkh HWI_INTRMULTHIGH,b1
1        00000064 00803676          stw b1,*a0++                ; Store into Interrupt Multiplexer High
1                           
1        00000068 008C522A          mvkl HWI_INTRMULTLOW,b1     ; Value for Interrupt Multiplexer Low
1        0000006c 009283EA          mvkh HWI_INTRMULTLOW,b1
1        00000070 00803676          stw b1,*a0++                ; Store into Interrupt Multiplexer Low
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  116

1        00000074 0080002A          mvkl HWI_POLARITYMASK,b1    ; Value for External Interrupt Polarity
1        00000078 0080006A          mvkh HWI_POLARITYMASK,b1
1        0000007c 00800276          stw b1,*a0                  ; Store into External Interrupt Polarity
1                           
1        00000080 00008000          nop 5                       ; allow settling for possible spurious
1        00000084 00008000          nop 5                       ; interrupts (10 cycles, per TI)
1                           
1        00000088 00FCA35A          mvk 0xffffffff,b1           ; clear any bits in IFR using ICR
1        0000008c 018403A2          mvc b1,icr
1                           
1        00000090 009003E2          mvc ier,b1
1        00000094 008448F2          or 2,b1,b1
1        00000098 020403A2          mvc b1,ier                  ; set NMIE bit (required to enable ISRs)
1                           
1                                   .if GBL_SUPPORTCSL
1                                       .ref    _GBL_cslInit
1                           
1        0000009c 0000002A!             mvkl    _GBL_cslInit, b0
1        000000a0 0000006A!             mvkh    _GBL_cslInit, b0
1        000000a4 00000362              b       b0
1        000000a8 01805A2A+             mvkl    hwi_init_ret?, b3
1        000000ac 0180006A+             mvkh    hwi_init_ret?, b3
1        000000b0 00004000              nop 3
1                           
1                           hwi_init_ret?:
1                                       .if GBL_CALLCSLCFGINIT
1                                           .ref        _CSL_cfgInit
1                           
1        000000b4 0080002A!                 mvkl        _CSL_cfgInit, b1
1        000000b8 0080006A!                 mvkh        _CSL_cfgInit, b1
1        000000bc 00040362                  b b1
1        000000c0 0180662A+                 mvkl        hwi_cslcfg_init_ret?, b3
1        000000c4 0180006A+                 mvkh        hwi_cslcfg_init_ret?, b3
1        000000c8 00004000                  nop 3
1                                       .endif
1                           hwi_cslcfg_init_ret?:
1                           
1                                   .endif
1                           
1                                   ; 
1                                   ; L2 CACHE initialization
1                                   ;
1                                   
1                                   .if (GBL_L2CONFIGURE != 0)
1                                       .ref  _GBL_cslCacheInit
1                           
1                                       mvkl  _GBL_cslCacheInit, b0
1                                       mvkh  _GBL_cslCacheInit, b0
1                           
1                                       .if .TMS320C6400
1                                           mvkl GBL_L2MODE, a4
1                           ||              mvkl GBL_C641XL2PRIORITY, b4
1                                           mvkh GBL_L2MODE, a4
1                           ||              mvkh GBL_C641XL2PRIORITY, b4
1                                           mvkl GBL_L2MARMASK1, a6
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  117

1                           ||              mvkl GBL_L2MARMASK2, b6
1                                           mvkh GBL_L2MARMASK1, a6
1                           ||              mvkh GBL_L2MARMASK2, b6
1                                           mvkl GBL_L2MARMASK3, a8
1                           ||              mvkl GBL_L2MARMASK4, b8
1                                           b       b0
1                                           mvkh GBL_L2MARMASK3, a8
1                           ||              mvkh GBL_L2MARMASK4, b8
1                                           mvkl GBL_L2MARMASK5, a10
1                           ||              mvkl GBL_L2CONFIGALLOC, b10
1                                           mvkh GBL_L2MARMASK5, a10
1                           ||              mvkh GBL_L2CONFIGALLOC, b10
1                                           mvkl GBL_L2ALLOC, a12
1                           ||              mvkl  gbl_cslcacheinit_ret?, b3
1                                           mvkh GBL_L2ALLOC, a12
1                           ||              mvkh  gbl_cslcacheinit_ret?, b3
1                                       .else
1                                           b       b0
1                                           mvkl  GBL_L2MODE, a4
1                           ||              mvkl  GBL_L2MARMASK, b4
1                                           mvkh  GBL_L2MODE, a4
1                           ||              mvkh  GBL_L2MARMASK, b4
1                                           mvkl  gbl_cslcacheinit_ret?, b3
1                                           mvkh  gbl_cslcacheinit_ret?, b3
1                                           nop 2
1                                       .endif
1                           
1                                   
1                                   .endif  ; GBL_L2CONFIGURE
1                           
1        000000cc           gbl_cslcacheinit_ret?:
1                           
1                                   ;
1                                   ; CACHE initialization
1                                   ;
1                           
1        000000cc 000403E2          mvc     csr, b0                 ; get CSR
1                           
1        000000d0 0100A35A          mvk     GBL_CACHE, b2           ; get cache bits from configuration
1                           
1        000000d4 00807E2A          mvk     C62_CCFIELDS, b1
1        000000d8 008029B2          and     b1, b0, b1              ; extract pcc+dcc fields of csr
1        000000dc 00002BB2          xor     b1, b0, b0              ; clear pcc+dcc fields of csr
1        000000e0 000048B2          or      b2, b0, b0              ; change pcc and dcc fields
1                           
1        000000e4 008003A2          mvc     b0, csr                 ; save CSR with new cache state
1                           
1                                   ;
1                                   ;  Calling TRC_init from here until there is at trc.cdb file.
1                                   ;
1        000000e8                   TRC_init
2                                   ; TRC is always configured, so until we have a trc.cdb
2                                   ; file, don't check if module is configured.
2        000000e8 02000028+         mvkl TRC_cinit, a4
2        000000ec 02000068+         mvkh TRC_cinit, a4
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  118

2        000000f0 02100264          ldw *a4, a4
2        000000f4 01000228+         mvkl TRC_R_mask, a2
2        000000f8 01000068+         mvkh TRC_R_mask, a2
2        000000fc 00002000          nop 2
2        00000100 02080274          stw a4, *a2
2                           
1                           
1                                   ;
1                                   ;  fill memory using triples (nwords, addr, value) from 
1                                   ;  gblinit table.
1                                   ;
1        00000104 02000028+         mvkl    gblinit, a4
1        00000108 02000068+         mvkh    gblinit, a4
1                           
1        0000010c           loop0?:
1        0000010c 00103666          ldw     *a4++[1], b0            ; nwords
1        00000110 00103664          ldw     *a4++[1], a0            ; address
1        00000114 01103666          ldw     *a4++[1], b2            ; value
1        00000118 00004000          nop     3
1        0000011c 30000812   [!b0]  b       done?
1        00000120 00008000          nop     5
1                           
1        00000124           loop1?:
1        00000124 01003676          stw     b2, *a0++[1]
1        0000012c 000029C2          sub     b0, 1, b0
1        00000130 20000092   [b0]   b       loop1?
1        00000134 00008000          nop     5
1                           
1        00000138 0FFFFD92          b       loop0?
1        0000013c 00008000          nop     5
1        00000140           done?:
1        00000140 0104A359          mvk     1, a2
1        00000144 0100042A+  ||     mvkl    GBL_initdone, b2
1        00000148 0100006A+         mvkh    GBL_initdone, b2
1        0000014c 010802F4          stw     a2, *b2
1                           
     859 00000150                   SEM_init
1                           
1                                   ; only expand if the SEM module is configured
1                                   .if (SEM$ = 1)
1                                   .endif
1                           
     860 00000150                   MEM_init
1                           
1                                   ; only expand if dyanmic memory heaps on configured by the user
1                                   .if (MEM_gNumHeap > 0)
1                                           .global _MEM_init
1                           
1        00000150 02000028!                 mvkl    _MEM_init, a4
1        00000154 02000068!                 mvkh    _MEM_init, a4
1        00000158 00101362                  b       a4
1        0000015c 0180B42A+                 mvkl    meminit?, b3
1        00000160 0180006A+                 mvkh    meminit?, b3
1        00000164 00004000                  nop     3
1                           meminit?:
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  119

1                           
1                                   .endif              
1                           
     861 00000168                   OBJ_init
     862 00000168                   BUF_init
1                           
1                                   ; only expand if the BUF module is configured
1                                   .if (BUF$ = 1)
1                                      .ref __BUF_init
1                            
1                                      mvkl   __BUF_init,a4
1                                      mvkh   __BUF_init,a4
1                                      b      a4
1                                      mvkl   bufstart?, b3
1                                      mvkh   bufstart?, b3
1                                      nop 3
1                           bufstart?:
1                           
1                                   .endif
1                           
     863 00000168                   CLK_init
1                           
1                                   ; only expand if the CLK module is configured by the user and he/she/it
1                                   ; asks to use the timer
1                                   .if ((CLK$ = 1) & (CLK_USETIMER = 1))
1                                   .endif
1                           
     864 00000168                   PRD_init
1                           
1                                   ; only expand if the PRD module is configured by the user 
1                                   .if (PRD$ = 1) 
1                                   .endif
1                           
     865 00000168                   RTDX_init
     866 00000168                   IDL_init
1                           
1                               ; only expand if the IDL module is configured by the user
1                               .if (IDL$ = 1)
1                                   .if (:USECLKIDLTIME:)         ; defined in IDL_config
1                           
1                                       .def BIOS$$CLKON, BIOS$$CLKOFF
1                           
1                           BIOS$$CLKON:
1                                   ; BIOS$$CLKON signals to the C6x fast simulators to switch into 
1                                   ; cycle-accurate mode.
1                                   ; This is to make the calibration of the IDL loop accurate, so that
1                                   ; CPU load, which is based on this calibration, will also be accurate.
1                                   ; The bookend label to this is BIOS$$CLKOFF.
1                           
1                                   ; Perform calibration twice; first time fills cache (6211), and 
1                                   ; second time yields the accurate calibration value. 
1                                   ldw *+b14(IDL_D_calibrate),a1
1                                   mvkl idlinit1?,b3
1                                   mvkh idlinit1?,b3
1                                   nop 2
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  120

1                                   b a1
1                                   nop 5
1                           idlinit1?:
1                                   ldw *+b14(IDL_D_calibrate),a1
1                                   mvkl idlinit2?,b3
1                                   mvkh idlinit2?,b3
1                                   nop 2
1                                   b a1
1                                   nop 5
1                           
1                           BIOS$$CLKOFF:
1                                   ; BIOS$$CLKOFF signals to the C6x fast simulators to switch out of 
1                                   ; cycle-accurate mode. This is the bookend label to BIOS$$CLKON.
1                           
1                                   ; Reset the IDL_busyObj values, and clear the "prev" value so the
1                                   ; first pass through the real IDL loop won't produce a garbage
1                                   ; value. The STS_reset API is not being used because the prev
1                                   ; value is not cleared in STS_reset, so doing it this way uses
1                                   ; less than half as many instructions as using the APIs. dsg-2/9/01
1                           idlinit2?:
1                                   ldw *+b14(IDL_D_busyObj),a4  ; load IDL_busyObj address to a4
1                                   zero a1
1                                   nop 3
1                                   stw a1,*-a4(4)      ; clear prev
1                                       stw a1,*+a4(0)              ; clear num
1                                       stw a1,*+a4(4)              ; clear acc
1                                       mvklh 8000h, a1             ; form largest negative number
1                                       stw a1,*+a4(8)              ; set max
1                                   .endif
1                               .endif
1                           
     867 00000168                   LCK_init
1                           
1                                   ; only expand if the LCK module is configured
1                                   .if (LCK$ = 1)
1                                   .endif
1                           
     868 00000168                   LOG_init
1                                   ; only expand if the LOG module is configured by the user
1                                   .if (LOG$ = 1)
1                                   .endif
1                           
     869 00000168                   MBX_init
1                           
1                                   ; only expand if the MBX module is configured
1                                   .if (MBX$ = 1)
1                                   .endif
1                           
     870 00000168                   PIP_init
     871 00000168                   QUE_init
     872 00000168                   STS_init
1                           
1                                   ; only expand if the STS module is configured
1                                   .if (STS$ = 1)
1                                   .endif
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  121

1                           
     873 00000168                   SYS_init
1                           
1                                   ; only expand if the SYS module is configured
1                                   .if (SYS$ = 1)
1                                   .endif
1                           
     874 00000168                   HWI_init
     875 00000168                   HST_init
1                                   ; only expand if the HST module is configured by the user
1                                   .if(HST$ != 0)
1                                       LNK_init    ; do any required LNK initialization
1                                   .endif
     876 00000168                   DEV_init
1                                   .if DEV$NUMDEVICES != 0
1                           
1                                       .global     _DEV_init
1                           
1                                       mvkl        _DEV_init, a4
1                                       mvkh        _DEV_init, a4
1                                       b           a4
1                                       mvkl        devinit?, b3
1                                       mvkh        devinit?, b3
1                                       nop 3
1                           devinit?:
1                           
1                                   .endif
1                           
     877 00000168                   UDEV_init
     878 00000168                   DGN_init
     879 00000168                   DHL_init
     880 00000168                   DPI_init
     881 00000168                   SIO_init
1                           
1                                   .if SIO$NUMOF != 0
1                           
1                                       .global     _SIO_init
1                           
1                                       mvkl        _SIO_init, a4
1                                       mvkh        _SIO_init, a4
1                                       b           a4
1                                       mvkl        siostart?, b3
1                                       mvkh        siostart?, b3
1                                       nop 3
1                           siostart?:
1                           
1                                   .endif
1                           
     882 00000168                   SWI_init
1                                   ; only expand if the SWI module is configured by the user
1                                   .if (SWI$ = 1)
1                                   .endif
1                           
     883 00000168                   HOOK_init
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  122

1                                   ; only expand if the HOOK module is configured
1                                   .if (HOOK$ = 1)
1                           
1                                   .ref    __HOOK_doInit
1                           
1                                   mvkl    __HOOK_doInit, a0
1                                   mvkh    __HOOK_doInit, a0
1                                   b       a0
1                                   mvkl    init_ret, b3
1                                   mvkh    init_ret, b3
1                                   nop     3
1                           init_ret:
1                           
1                                   .endif
1                           
     884 00000168                   TSK_init
1                           
1                                   ; only expand if the TSK module is configured
1                                   .if (TSK$ = 1)
1                           
1                                       .global _TSK_init
1                                       .global _TSK_setup
1                           
1        00000168 02000028!             mvkl        _TSK_init, a4
1        0000016c 02000068!             mvkh        _TSK_init, a4
1        00000170 00101362              b           a4
1        00000174 0180C02A+             mvkl        tskinit?, b3
1        00000178 0180006A+             mvkh        tskinit?, b3
1        0000017c 00004000              nop         3
1                           
1                           tskinit?:
1                                       .if TSK$NUMOF != 0
1                           
1        00000180 02000028!                 mvkl    _TSK_setup, a4
1        00000184 02000068!                 mvkh    _TSK_setup, a4
1        00000188 00101362                  b       a4
1        0000018c 0180CC2A+                 mvkl    tskstup?, b3      ; return address
1        00000190 0180006A+                 mvkh    tskstup?, b3
1        00000194 00004000                  nop     3
1                                       .else
1                                           .emsg "There must be at least one task defined under TSK."
1                                       .endif
1                           
1                           tskstup?:
1                           
1                                   .endif
1                           
     885 00000198                   ISRC_init
     886 00000198                   GIO_init
1                           
1                                   ; only expand if the GIO module is configured
1                                   .if (GIO$ = 1)
1                                   .endif
1                           
     887 00000198                   DIO_init
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  123

     888 00000198                   GBL_postamble
1        00000198 01BC52E6          ldw     *++b15[2], b3
1        0000019c 00006000          nop     4
1        000001a0 000C0362          b       b3
1        000001a4 00008000          nop     5
1                           
     889                    
     890                    ;; MODULE STARTUP
     891 000001a8                   .sect ".sysinit"
     892                            .global BIOS_start, _BIOS_start
     893 000001a8           BIOS_start:
     894 000001a8           _BIOS_start:
     895 000001a8                   GBL_preamble
1        000001a8 01BC54F6          stw     b3, *b15--[2]
1                           
     896 000001ac                   GBL_startup
     897 000001ac                   SEM_startup
1                           
1                                   .if     SEM$NUMOF != 0
1                                   .endif
     898 000001ac                   MEM_startup
     899 000001ac                   OBJ_startup
     900 000001ac                   BUF_startup
1                           
1                                   .if     BUF$NUMOF != 0
1                                   .endif
     901 000001ac                   CLK_startup
1                           
1                                   ; only expand if the CLK module is configured by the user and he/she
1                                   ; asks to use the timer
1                                   .if ((CLK$ = 1) & (CLK_USETIMER = 1))
1                                   
1                                   .if GBL_SUPPORTCSL
1                           
1                                       ;
1                                       ; Force a reference to the appropriate CLK_startXXX function.
1                                       ; CLK_start will be aliased to this function in the cfg.cmd file.
1                                       ;
1                                       ; A forced reference is necessary because no module directly
1                                       ; references this function, and the aliasing performed in the
1                                       ; linker command file cfg.cmd needs the symbol to be well
1                                       ; defined at the time of the alias, which is after the libraries
1                                       ; have already been scanned.  The following reference alone will
1                                       ; cause the function to be linked in from the BIOS library,
1                                       ; allowing the subsequent alias to be satisfied.
1                                       ;
1                                       .ref        _CLK_start6x            ; only one version now
1                                       .ref        _CLK_start
1                                   
1        000001ac 00000028!             mvkl        _CLK_start, a0
1        000001b0 00000068!             mvkh        _CLK_start, a0
1        000001b4 00001362              b   a0
1        000001b8 0180E22A+             mvkl        clk_startup_ret?, b3
1        000001bc 0180006A+             mvkh        clk_startup_ret?, b3
1        000001c0 00004000              nop 3
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  124

1                           clk_startup_ret?:
1                           
1                                   .else
1                           
1                                       mvkl CLK_REGS,a0            ; get address to Timer Control register
1                                ||     mvkl CLK_CLKSRC,b2
1                                       mvkh CLK_REGS,a0
1                                ||     mvkh CLK_CLKSRC,b2
1                                       stw b2,*a0              ; write /HLD=0 and CLKSRC=1 to Timer Control
1                           
1                                       ; set the period
1                                       mvkl CLK_PRD, a1
1                                       mvkh CLK_PRD, a1
1                                       stw a1, *+a0[1]
1                           
1                                       ; start timer
1                                       ldw *a0, a1
1                                       mvk CLK_START,b1    ; get start mask
1                                       nop 3
1                                       or b1,a1,a1         ; set GO=1 and /HLD=1
1                                       stw a1,*a0          ; write to Timer Control to start timer
1                           
1                                       ; enable Timer interrupt in IER
1                                       mvkl CLK_INTBIT,a0
1                                       mvkh CLK_INTBIT,a0
1                                       mvc ier,b1
1                                       or a0,b1,b1         ; set CLK_INTBIT
1                                       mvc b1,ier
1                           
1                                   .endif
1                           
1                                   .endif
1                           
     902 000001c4                   PRD_startup
     903 000001c4                   RTDX_startup
     904 000001c4                   IDL_startup
     905 000001c4                   LCK_startup
1                           
1                                   .if     LCK$NUMOF != 0
1                                   .endif
     906 000001c4                   LOG_startup
     907 000001c4                   MBX_startup
1                           
1                                   .if     MBX$NUMOF != 0
1                                   .endif
     908 000001c4                   PIP_startup
1        000001c4                   CHK_void PIP_startup, dummy
1                           
1                                   ; expand startup code only if some PIP objects are configured
1                                   .if((PIP$ + PIP_gNumEmbed) !=0 )
1                                       mvkl PIP_F_start,b4         ; set up for far branch
1                                       mvkh PIP_F_start,b4
1                                       b b4                        ; start branch to startup function
1                                       mvkl PIP_D_tabbeg,a4        ; set a4 for PIP_F_start call
1                                       mvkh PIP_D_tabbeg,a4
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  125

1                                       nop
1                                       mvkl pips?,b3               ; set return for here
1                                       mvkh pips?,b3
1                                   .endif
1                           
1                           pips?:  
1                           
     909 000001c4                   QUE_startup
     910 000001c4                   STS_startup
     911 000001c4                   SYS_startup
     912 000001c4                   HWI_startup
1                           
1                                   ; globally enable interrupts
1        000001c4                   HWI_enable
2        000001c4 00000312          b hwie?
2        000001c8 000403E2          mvc csr,b0
2        000001cc 000028F2          or GIE,b0,b0
2        000001d0 008003A2          mvc b0,csr      
2        000001d4 00002000          nop 2
2                           hwie?:
1                           
     913 000001d8                   HST_startup
     914 000001d8                   DEV_startup
     915 000001d8                   UDEV_startup
     916 000001d8                   DGN_startup
1                                   .if     DGN$NUMOF != 0
1                           
1                                   ;
1                                   ; DGN_init is #defined as SYS_nop in dgn.h,
1                                   ; so we won't do anything here.
1                                   ;
1                                   ;.global _DGN_init
1                                   ; call   _DGN_init
1                           
1                                   .endif
     917 000001d8                   DHL_startup
1                                   .if     DHL$NUMOF != 0
1                           
1                                   .endif
     918 000001d8                   DPI_startup
1                                   .if     DPI$NUMOF != 0
1                                   .endif
     919 000001d8                   SIO_startup
     920 000001d8                   SWI_startup
1        000001d8                   CHK_void SWI_startup, dummy
1                           
1                                   ; only expand if the SWI module is configured by the user
1                                   .if (SWI$ = 1)
1        000001d8 02000028!             mvkl SWI_F_enable,a4                ; prepare for far branch
1        000001dc 02000068!             mvkh SWI_F_enable,a4
1        000001e0 00101362              b a4                        ; start branch to SWI_F_enable  
1        000001e4 0180F82A+             mvkl swii?,b3               ; setup b3 pointer to come back here
1        000001e8 0180006A+             mvkh swii?,b3
1        000001ec 00004000              nop 3
1                           swii?:
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  126

1                                   .endif  
     921 000001f0                   HOOK_startup
1                           
1                                   ; only expand if the HOOK module is configured
1                                   .if (HOOK$ = 1)
1                           
1                                   .endif
1                           
     922 000001f0                   TSK_startup
1                           
1                                   ; only expand if the TSK module is configured
1                                   .if (TSK$ = 1)
1                           
1                                       .global _TSK_startup
1                           
1                                       .if TSK$NUMOF != 0
1                           
1        000001f0 02000028!                 mvkl _TSK_startup, a4
1        000001f4 02000068!                 mvkh _TSK_startup, a4
1        000001f8 00101362                  b    a4
1        000001fc 0181042A+                 mvkl tskstup?, b3      ; return address
1        00000200 0180006A+                 mvkh tskstup?, b3
1        00000204 00004000                  nop  3
1                           
1                                       .endif
1                           
1                           tskstup?:
1                                   .endif
     923 00000208                   ISRC_startup
     924 00000208                   GIO_startup
     925 00000208                   DIO_startup
     926 00000208                   GBL_postamble
1        00000208 01BC52E6          ldw     *++b15[2], b3
1        0000020c 00006000          nop     4
1        00000210 000C0362          b       b3
1        00000214 00008000          nop     5
1                           
     927                    
     928                    ;; EPILOGUE
     929 00000218                   GBL_end
1                           
1        00000030                   .sect ".gblinit"
1        00000030 00000000          .word 0                 ; end of gblinit table marker
1                           
     930 00000034                   MEM_end
     931 00000034                   OBJ_end
1                           
1                                   ;
1                                   ;  We only need the OBJ_table if any of the objects in the modules
1                                   ;  below are created in the configuration, or if they can be created
1                                   ;  dynamically (requires heaps).
1                                   ;
1                                   .if (MEM_gNumHeap > 0) | MBX$ | SEM$ | SIO$ | TSK$ | DEV$NUMDEVICES | BUF$
1                           
1                                    .global _OBJ_table
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  127

1        00000018                   .bss    _OBJ_table, OBJ_MODULES * STD_TARGWORDMAUS * 2, STD_TARGWORDMAUS
1                           
1        000002f8                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        000002f8 00000038          .word   OBJ_MODULES * STD_TARGWORDMAUS * 2
1        000002fc 00000018-         .word   _OBJ_table
1        00000300 00000018-         .word   _OBJ_table + 0 * STD_TARGWORDMAUS, _OBJ_table + 0 * STD_TARGWORDMAUS
         00000304 00000018-
1        00000308 00000020-         .word   _OBJ_table + 2 * STD_TARGWORDMAUS, _OBJ_table + 2 * STD_TARGWORDMAUS
         0000030c 00000020-
1        00000310 00000000-         .word   TSK_idle$obj, TSK_idle$obj
         00000314 00000000-
1        00000318 00000030-         .word   _OBJ_table + 6 * STD_TARGWORDMAUS, _OBJ_table + 6 * STD_TARGWORDMAUS
         0000031c 00000030-
1        00000320 00000038-         .word   _OBJ_table + 8 * STD_TARGWORDMAUS, _OBJ_table + 8 * STD_TARGWORDMAUS
         00000324 00000038-
1        00000328 00000040-         .word   _OBJ_table + 10 * STD_TARGWORDMAUS, _OBJ_table + 10 * STD_TARGWORDMAUS
         0000032c 00000040-
1        00000330 00000048-         .word   _OBJ_table + 12 * STD_TARGWORDMAUS, _OBJ_table + 12 * STD_TARGWORDMAUS
         00000334 00000048-
1                           
1                                   .endif
1                           
     932 00000338                   BUF_end
     933 00000338                   CLK_end
1                                   .if (CLK$NUMOF != 0)
1        00000338                       CLK_Obj     1,CLK_null,-1,0 ; NULL terminate clock isr fxn table
2        00000338                   CHK_nargs "CLK_Obj", fxn
2                                   .if ($symcmp("", "error") = 0)
2                                       .emsg "CLK_OBJ parameter error."
2                                   .endif
2                           
2                                   .var fxnlen
2                                   .eval $symlen("0"),fxnlen
2                           
2                                   .if (1 = 0)
2                                       .mexit
2                                   .endif
2                           
2                                   .global CLK_null
2                           
2                                   .if ($symcmp("0", "0") != 0)
2                                   .global fxn
2                                   .endif
2                           
2                           CLK_null  .tag    CLK_Obj         ; declare name as having type CLK_Obj
2                           
2                           ; allocate all CLK objs contiguously in ".clk"
2        00000004           CLK_null        .usect ".clk", STD_TARGWORDMAUS * 1, STD_TARGWORDMAUS
2                           
2        00000338                   .sect ".cinit"
2                           
2                                   .align  8
2                           
2        00000338 00000004          .field  STD_TARGWORDMAUS * 1
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  128

2                           
2        0000033c 00000004-         .field  CLK_null    
2                           
2        00000340 00000000          .field  0           ; fxn
2                           
1                                   .endif
1                           
     934 00000344                   PRD_end
1                 00000000  PRD_SWIHANDLE .set 0
     935 00000344                   RTDX_end
     936 00000344                   HST_end
     937 00000344                   HWI_end
     938 00000344                   SWI_end
     939 00000344                   TSK_end
1                           
1                                   ; expand only if TSK is enabled.
1                                   .if (TSK$ == 1)
1                           
1                           ;
1                           ; The following two .bss/.cinit sets make configured values readable
1                           ; in the established SPOX manner, e.g., TSK->STACKSIZE.
1                           ;
1                           ;
1                           
1        00000050                   .bss    TSK_config,8 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        00000344                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        00000348 00000020          .word 8 * STD_TARGWORDMAUS
1        0000034c 00000050-         .word TSK_config
1        00000350 FFFFFFFF          .word -1
1        00000354 00000001          .word TSK_PRIORITY
1        00000358 00000400          .word TSK_STACKSIZE     ; This shall be interpreted as number of MAU's
1        0000035c 00000000!         .word TSK_VCREATEFXN
1        00000360 00000000!         .word TSK_VDELETEFXN
1        00000364 00000000!         .word TSK_VEXITFXN
1        00000368 00000000          .word TSK_SWITCHFXN
1        0000036c 00000000          .word TSK_READYFXN
1                           
1                                   .def _TSK                       ; Pointer to configuration parameters
1        00000070                   .bss        _TSK, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        00000370                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        00000370 00000004          .word   1 * STD_TARGWORDMAUS
1        00000374 00000070-         .word   _TSK
1        00000378 00000050-         .word   TSK_config
1                           
1                                   ;
1                                   ; The startup stack will be borrowed from the idle task's stack.  The
1                                   ; startup stack must begin beyond the portion of the stack that is
1                                   ; statically initialized, so the __STACK_SIZE will be decremented by
1                                   ; that amount.
1                                   ;
1                           ;       .def    __stack, __STACK_SIZE
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  129

1                           
1                           ;__stack                .set    TSK_idle$stack
1                           ;__STACK_SIZE   .set    TSK_idle$stklen - (TSK_USEDSTACK * STD_TARGWORDMAUS)
1                           
1                                   .endif          ; if (TSK$ == 1)
1                           
     940 0000037c                   IDL_end
1        0000037c               IDL_Obj 1,IDL_END,-1,0,1     ; NULL terminate idle function table
2        0000037c                   CHK_nargs "IDL_Obj", calibration
2                                   .if ($symcmp("", "error") = 0)
2                                       .mexit
2                                   .endif
2                           
2                               .var fxnlen
2                               .eval $symlen("0"),fxnlen
2                           
2                                   .if (1 = 0)   ; if this object is not really to be allocated
2                                       .mexit      ; exit quietly now
2                                   .endif
2                           
2                                   .global IDL_END$
2                                   .global IDL_END
2                           
2                                   .if ($symcmp("0", "0") != 0)
2                               .global :fxn:
2                                   .endif
2                           
2                           IDL_END$ .tag    IDL_Obj         ; declare name$ as having type IDL_Obj
2                           
2        00000000           IDL_END$ .usect ".idlcal", STD_TARGWORDMAUS * 1, STD_TARGWORDMAUS
2                           
2        0000037c                   .sect ".cinit"
2                           
2                               .align  8
2        00000380 00000004      .field  STD_TARGWORDMAUS * 1
2        00000384 00000000-     .field  IDL_END$    
2                                   .if (1 != 0) ; if to be included in IDL calibration
2        00000388 00000000              .field  0             ; fxn
2                               .else
2                                       .field  FXN_F_nop    ; else use FXN_F_nop
2                                   .endif
2                           
2                           IDL_END  .tag    IDL_Obj         ; declare name as having type IDL_Obj
2                           
2        00000000           IDL_END  .usect ".idl", STD_TARGWORDMAUS * 1, STD_TARGWORDMAUS
2                           
2        0000038c                   .sect ".cinit"
2                           
2                               .align  8
2        00000390 00000004      .field  STD_TARGWORDMAUS * 1
2        00000394 00000000-     .field  IDL_END    
2        00000398 00000000      .field  0           ; fxn
2                           
1                           
     941 0000039c                   ISRC_end
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  130

     942 0000039c                   LOG_end
     943 0000039c                   PIP_end
     944 0000039c                   SEM_end
     945 0000039c                   MBX_end
     946 0000039c                   QUE_end
     947 0000039c                   LCK_end
     948 0000039c                   SIO_end
     949 0000039c                   STS_end
     950 0000039c                   SYS_end
     951 0000039c                   GIO_end
     952 0000039c                   DEV_end
1                           
1                           ;
1                           ;  We reserve uninitialized space for the initialization table
1                           ;  (_DEV_devinit). This is a table that contains pointers to all the
1                           ;  initialization routines for all the devices.
1                           ;
1                           
1                                   .if (DEV$NUMDEVICES > 0)        ; expand only if devices are configured.
1                           
1                                   .global _DEV_devinit
1                                   .global _DEV_D_devinit          ; init pointer to _DEV_devinit
1                           
1                                   .bss    _DEV_devinit, DEV$initCount * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    _DEV_D_devinit, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1                                   .word   1 * STD_TARGWORDMAUS
1                                   .word   _DEV_D_devinit
1                                   .word   _DEV_devinit
1                           
1                           ;
1                           ; __DEV_NUMINITFXNS keeps track of the number of initialization routines for
1                           ; device drivers that need to be called at initialization.
1                           ;
1                                   .global __DEV_NUMINITFXNS
1                                   .global __DEV_D_NUMINITFXNS     ; init pointer to DEV_NUMINITFXNS
1                           
1                                   .bss    __DEV_NUMINITFXNS, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    __DEV_D_NUMINITFXNS, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1                                   .word   1 * STD_TARGWORDMAUS
1                                   .word   __DEV_NUMINITFXNS
1                                   .word   DEV$initCount
1                           
1                                   .align  STD_TARGALIGN
1                                   .word   1 * STD_TARGWORDMAUS
1                                   .word   __DEV_D_NUMINITFXNS
1                                   .word   __DEV_NUMINITFXNS
1                           
1                                   .endif          ; .if (DEV$NUMDEVICES > 0)
1                           
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  131

     953 0000039c                   UDEV_end
     954 0000039c                   DGN_end
     955 0000039c                   DHL_end
1                           
1                                   ; expand only if there are DHL devices configured.
1                                   .if (0 > 0)
1                           
1                                       .global  __DHL_tab
1                                       .bss  __DHL_tab, DHL$count * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                       .global  __DHL_numof
1                                       .bss  __DHL_numof, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                       .sect       ".cinit"
1                                       .align      STD_TARGALIGN
1                                       .word       1 * STD_TARGWORDMAUS
1                                       .word       __DHL_numof
1                                       .word       DHL$count
1                           
1                                   .endif
1                           
     956 0000039c                   DPI_end
     957 0000039c                   HOOK_end
1                           
1                                   ; expand only if HOOK is enabled.
1                                   .if (HOOK$ == 1)
1                           
1                                   .bss    __HOOK_initFxnTable, HOOK$index * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    __HOOK_createFxnTable, HOOK$index * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    __HOOK_deleteFxnTable, HOOK$index * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    __HOOK_exitFxnTable, HOOK$index * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    __HOOK_readyFxnTable, HOOK$index * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                                   .bss    __HOOK_switchFxnTable, HOOK$index * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1                                   .endif
1                           
1                                   ;
1                                   ; always define _HOOK_NUMHOOKS
1                                   ;
1                                   .def    __HOOK_NUMHOOKS
1                           
1        00000074                   .bss    __HOOK_NUMHOOKS, 1 * STD_TARGWORDMAUS, STD_TARGWORDMAUS
1                           
1        0000039c                   .sect   ".cinit"
1                                   .align  STD_TARGALIGN
1        000003a0 00000004          .word   1 * STD_TARGWORDMAUS
1        000003a4 00000074-         .word   __HOOK_NUMHOOKS
1        000003a8 00000000          .word   0
1                           
     958 000003ac                   DIO_end
     959                    
     960                            .copy confend.s62
 +     1                    ;
 +     2                    ;  Copyright 2003 by Texas Instruments Incorporated.
 +     3                    ;  All rights reserved. Property of Texas Instruments Incorporated.
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  132

 +     4                    ;  Restricted rights to use, duplicate or disclose this code are
 +     5                    ;  granted through contract.
 +     6                    ;  
 +     7                    ;
 +     8                    ; "@(#) DSP/BIOS 4.90.270 01-13-05 (barracuda-o07)"
 +     9                    ;
 +    10                    ;  ======== confend.s62 ========
 +    11                    ;  The statements in this file are inserted at the end of 
 +    12                    ;  every BIOS configuration file.
 +    13                    ;
 +    14                            .include vers.h62
 +    15                    
 +    16 000003ac                   VERS_create VERS$DATE, VERS$CDB, VERS$TREE, VERS$CDBRELATIVEPATH
1+       000003ac                   CHK_nargs "VERS_create", tree
1+                                  .if ($symcmp("", "error") = 0)
1+                                      .mexit
1+                                  .endif
1+                          
1+       00000000                   .sect ".vers"
1+       00000000 00000057          .byte "Wed Oct 24 15:33:21 2007"
         00000001 00000065 
         00000002 00000064 
         00000003 00000020 
         00000004 0000004F 
         00000005 00000063 
         00000006 00000074 
         00000007 00000020 
         00000008 00000032 
         00000009 00000034 
         0000000a 00000020 
         0000000b 00000031 
         0000000c 00000035 
         0000000d 0000003A 
         0000000e 00000033 
         0000000f 00000033 
         00000010 0000003A 
         00000011 00000032 
         00000012 00000031 
         00000013 00000020 
         00000014 00000032 
         00000015 00000030 
         00000016 00000030 
         00000017 00000037 
1+       00000018 00000000          .byte 0
1+       00000019 00000066          .byte "framework.cdb"
         0000001a 00000072 
         0000001b 00000061 
         0000001c 0000006D 
         0000001d 00000065 
         0000001e 00000077 
         0000001f 0000006F 
         00000020 00000072 
         00000021 0000006B 
         00000022 0000002E 
         00000023 00000063 
TMS320C6x COFF Assembler PC v5.1.0 Thu Oct 28 15:13:25 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
frameworkcfg.s62                                                     PAGE  133

         00000024 00000064 
         00000025 00000062 
1+       00000026 00000000          .byte 0
1+       00000027 00000040          .byte "@(#)*** xdc-c38"
         00000028 00000028 
         00000029 00000023 
         0000002a 00000029 
         0000002b 0000002A 
         0000002c 0000002A 
         0000002d 0000002A 
         0000002e 00000020 
         0000002f 00000078 
         00000030 00000064 
         00000031 00000063 
         00000032 0000002D 
         00000033 00000063 
         00000034 00000033 
         00000035 00000038 
1+       00000036 00000000          .byte 0
1+       00000037 0000003B          .byte ";;;;"
         00000038 0000003B 
         00000039 0000003B 
         0000003a 0000003B 
1+       0000003b 00000000          .byte 0
1+       00000000                   .text
 +    17                    
 +    18 00000000                   .text
 +    19                    

No Assembly Errors, No Assembly Warnings
