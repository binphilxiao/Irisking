C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PERIPH
OBJECT MODULE PLACED IN PERIPH.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PERIPH.C OPTIMIZE(6,SPEED) DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          //   File:      periph.c
   3          //   Contents:  Hooks required to implement USB peripheral function.
   4          //
   5          // $Archive: /USB/Target/Fw/lp/periph.c $
   6          // $Date: 3/23/05 3:03p $
   7          // $Revision: 3 $
   8          //
   9          //
  10          //-----------------------------------------------------------------------------
  11          // Copyright 2003, Cypress Semiconductor Corporation
  12          //
  13          // This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  14          // protected by United States copyright laws and international treaty provisions. Cypress
  15          // hereby grants to Licensee a personal, non-exclusive, non-transferable license to copy,
  16          // use, modify, create derivative works of, and compile the Cypress Source Code and
  17          // derivative works for the sole purpose of creating custom software in support of Licensee
  18          // product ("Licensee Product") to be used only in conjunction with a Cypress integrated
  19          // circuit. Any reproduction, modification, translation, compilation, or representation of this
  20          // software except as specified above is prohibited without the express written permission of
  21          // Cypress.
  22          //
  23          // Disclaimer: Cypress makes no warranty of any kind, express or implied, with regard to
  24          // this material, including, but not limited to, the implied warranties of merchantability and
  25          // fitness for a particular purpose. Cypress reserves the right to make changes without
  26          // further notice to the materials described herein. Cypress does not assume any liability
  27          // arising out of the application or use of any product or circuit described herein. Cypress?
  28          // products described herein are not authorized for use as components in life-support
  29          // devices.
  30          //
  31          // This software is protected by and subject to worldwide patent coverage, including U.S.
  32          // and foreign patents. Use may be limited by and subject to the Cypress Software License
  33          // Agreement.
  34          //-----------------------------------------------------------------------------
  35          #pragma NOIV               // Do not generate interrupt vectors
  36          
  37          #include "fx2.h"
  38          #include "fx2regs.h"
  39          #include "syncdly.h"            // SYNCDELAY macro
  40          
  41          extern BOOL   GotSUD;         // Received setup data flag
  42          extern BOOL   Sleep;
  43          extern BOOL   Rwuen;
  44          extern BOOL   Selfpwr;
  45          
  46          BYTE   Configuration;      // Current configuration
  47          BYTE   AlternateSetting;   // Alternate settings
  48          
  49          #define VR_NAKALL_ON    0xD0
  50          #define VR_NAKALL_OFF   0xD1
  51             
  52          //-----------------------------------------------------------------------------
  53          //void EZUSB_InitI2C(void)
  54          //BOOL EZUSB_WriteI2C(BYTE addr, BYTE length, BYTE xdata *dat)
  55          //BOOL EZUSB_ReadI2C(BYTE addr, BYTE length, BYTE xdata *dat)
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 2   

  56          //-----------------------------------------------------------------------------
  57          // Task Dispatcher hooks
  58          //   The following hooks are called by the task dispatcher.
  59          //-----------------------------------------------------------------------------
  60          void TD_Init(void)             // Called once at startup
  61          {
  62   1         #ifdef CONFIG_CMOS
                 EZUSB_InitI2C();
                 #endif
  65   1      
  66   1         // set the CPU clock to 48MHz
  67   1         CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1) ;
  68   1         // to see BKPT LED go out TGE
  69   1         BREAKPT &= ~bmBPEN;      
  70   1         // set the slave FIFO interface to 48MHz
  71   1         IFCONFIG |= 0x40;//GPIF/FIFO 目前使用的是内部时钟，复位缺省值
  72   1      
  73   1        // Registers which require a synchronization delay, see section 15.14
  74   1        // FIFORESET        FIFOPINPOLAR
  75   1        // INPKTEND         OUTPKTEND
  76   1        // EPxBCH:L         REVCTL
  77   1        // GPIFTCB3         GPIFTCB2
  78   1        // GPIFTCB1         GPIFTCB0
  79   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
  80   1        // EPxFIFOCFG       EPxGPIFFLGSEL
  81   1        // PINFLAGSxx       EPxFIFOIRQ
  82   1        // EPxFIFOIE        GPIFIRQ
  83   1        // GPIFIE           GPIFADRH:L
  84   1        // UDMACRCH:L       EPxGPIFTRIG
  85   1        // GPIFTRIG
  86   1        
  87   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
  88   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
  89   1      
  90   1        // default: all endpoints have their VALID bit set
  91   1        // default: TYPE1 = 1 and TYPE0 = 0 --> BULK  
  92   1        // default: EP2 and EP4 DIR bits are 0 (OUT direction)
  93   1        // default: EP6 and EP8 DIR bits are 1 (IN direction)
  94   1        // default: EP2, EP4, EP6, and EP8 are double buffered
  95   1      
  96   1        // we are just using the default values, yes this is not necessary...
  97   1        EP1OUTCFG = 0xA0;     //EP1OUT valid, bulk mode
  98   1        EP1INCFG = 0xA0;//EP1IN valid, bulk mode
  99   1        SYNCDELAY;                    // see TRM section 15.14
 100   1        EP2CFG = 0xA2;//EP1IN valid, bulk mode, DIR out, Buffering Type Double
 101   1        SYNCDELAY;                    
 102   1        EP4CFG = 0xA0;//EP1IN valid, bulk mode, DIR out, Buffering Type Quad
 103   1        SYNCDELAY;                    
 104   1        EP6CFG = 0xE2;//EP1IN valid, bulk mode, DIR in, Buffering Type Double
 105   1        SYNCDELAY;                    
 106   1        EP8CFG = 0xE0;//EP1IN valid, bulk mode, DIR in, Buffering Type Quad
 107   1      
 108   1        // out endpoints do not come up armed
 109   1        
 110   1        // since the defaults are double buffered we must write dummy byte counts twice
 111   1        SYNCDELAY;                    
 112   1        EP2BCL = 0x80;                // arm EP2OUT by writing byte count w/skip.
 113   1        SYNCDELAY;                    
 114   1        EP2BCL = 0x80;
 115   1        SYNCDELAY;                    
 116   1        EP4BCL = 0x80;                // arm EP4OUT by writing byte count w/skip.
 117   1        SYNCDELAY;                    
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 3   

 118   1        EP4BCL = 0x80;    
 119   1      
 120   1        // enable dual autopointer feature
 121   1        AUTOPTRSETUP |= 0x01;
 122   1      
 123   1      }
 124          
 125          void TD_Poll(void)             // Called repeatedly while the device is idle
 126          {
 127   1        WORD i;
 128   1        WORD count;
 129   1        BYTE CMOS_Reg[2];
 130   1        BOOL ret;
 131   1      
 132   1      #ifdef CONFIG_CMOS
                if(!(EP2468STAT & bmEP2EMPTY))
                {     
                       count = (EP2BCH << 8) + EP2BCL;
                       for( i = 0x0000; i < count; )
                       {
                              CMOS_Reg[0]=EP2FIFOBUF[i];
                              CMOS_Reg[1]=EP2FIFOBUF[i+1];
                          ret=EZUSB_WriteI2C(0x21, 2, &CMOS_Reg);
                              i+=2;
                       }
                }
              #endif
 145   1      
 146   1              if (1)/*!(CMOS_FIFO_EMPTY)*///如果CMOS图像的FIFO中有数据
 147   1              {
 148   2           if(!(EP2468STAT & bmEP6FULL))//如果EP6 FIFO没有满
 149   2           {  // check EP6 FULL(busy) bit in EP2468STAT (SFR), core set's this bit when FIFO is full
 150   3              APTR1H = MSB( &EP2FIFOBUF );
 151   3              APTR1L = LSB( &EP2FIFOBUF );
 152   3      
 153   3              AUTOPTRH2 = MSB( &EP6FIFOBUF );
 154   3              AUTOPTRL2 = LSB( &EP6FIFOBUF );
 155   3      
 156   3              count = (EP2BCH << 8) + EP2BCL;
 157   3      
 158   3              // loop EP2OUT buffer data to EP6IN
 159   3              for( i = 0x0000; i < count; i++ )
 160   3              {
 161   4                 // setup to transfer EP2OUT buffer to EP6IN buffer using AUTOPOINTER(s)
 162   4                 EXTAUTODAT2 = EXTAUTODAT1;
 163   4              }
 164   3              EP6BCH = EP2BCH;  
 165   3              SYNCDELAY;  
 166   3              EP6BCL = EP2BCL;        // arm EP6IN
 167   3              SYNCDELAY;                    
 168   3              EP2BCL = 0x80;          // re(arm) EP2OUT
 169   3           }
 170   2              }
 171   1      }
*** WARNING C280 IN LINE 129 OF PERIPH.C: 'CMOS_Reg': unreferenced local variable
*** WARNING C280 IN LINE 130 OF PERIPH.C: 'ret': unreferenced local variable
 172          
 173          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
 174          {
 175   1         return(TRUE);
 176   1      }
 177          
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 4   

 178          BOOL TD_Resume(void)          // Called after the device resumes
 179          {
 180   1         return(TRUE);
 181   1      }
 182          
 183          //-----------------------------------------------------------------------------
 184          // Device Request hooks
 185          //   The following hooks are called by the end point 0 device request parser.
 186          //-----------------------------------------------------------------------------
 187          
 188          BOOL DR_GetDescriptor(void)
 189          {
 190   1         return(TRUE);
 191   1      }
 192          
 193          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 194          {
 195   1         Configuration = SETUPDAT[2];
 196   1         return(TRUE);            // Handled by user code
 197   1      }
 198          
 199          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 200          {
 201   1         EP0BUF[0] = Configuration;
 202   1         EP0BCH = 0;
 203   1         EP0BCL = 1;
 204   1         return(TRUE);            // Handled by user code
 205   1      }
 206          
 207          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 208          {
 209   1         AlternateSetting = SETUPDAT[2];
 210   1         return(TRUE);            // Handled by user code
 211   1      }
 212          
 213          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 214          {
 215   1         EP0BUF[0] = AlternateSetting;
 216   1         EP0BCH = 0;
 217   1         EP0BCL = 1;
 218   1         return(TRUE);            // Handled by user code
 219   1      }
 220          
 221          BOOL DR_GetStatus(void)
 222          {
 223   1         return(TRUE);
 224   1      }
 225          
 226          BOOL DR_ClearFeature(void)
 227          {
 228   1         return(TRUE);
 229   1      }
 230          
 231          BOOL DR_SetFeature(void)
 232          {
 233   1         return(TRUE);
 234   1      }
 235          
 236          BOOL DR_VendorCmnd(void)
 237          {
 238   1        BYTE tmp;
 239   1        
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 5   

 240   1        switch (SETUPDAT[1])
 241   1        {
 242   2           case VR_NAKALL_ON:
 243   2              tmp = FIFORESET;
 244   2              tmp |= bmNAKALL;      
 245   2              SYNCDELAY;                    
 246   2              FIFORESET = tmp;
 247   2              break;
 248   2           case VR_NAKALL_OFF:
 249   2              tmp = FIFORESET;
 250   2              tmp &= ~bmNAKALL;      
 251   2              SYNCDELAY;                    
 252   2              FIFORESET = tmp;
 253   2              break;
 254   2           default:
 255   2              return(TRUE);
 256   2        }
 257   1      
 258   1        return(FALSE);
 259   1      }
 260          
 261          //-----------------------------------------------------------------------------
 262          // USB Interrupt Handlers
 263          //   The following functions are called by the USB interrupt jump table.
 264          //-----------------------------------------------------------------------------
 265          
 266          // Setup Data Available Interrupt Handler
 267          void ISR_Sudav(void) interrupt 0
 268          {
 269   1         GotSUD = TRUE;            // Set flag
 270   1         EZUSB_IRQ_CLEAR();
 271   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 272   1      }
 273          
 274          // Setup Token Interrupt Handler
 275          void ISR_Sutok(void) interrupt 0
 276          {
 277   1         EZUSB_IRQ_CLEAR();
 278   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 279   1      }
 280          
 281          void ISR_Sof(void) interrupt 0
 282          {
 283   1         EZUSB_IRQ_CLEAR();
 284   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 285   1      }
 286          
 287          void ISR_Ures(void) interrupt 0
 288          {
 289   1         // whenever we get a USB reset, we should revert to full speed mode
 290   1         pConfigDscr = pFullSpeedConfigDscr;
 291   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 292   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 293   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 294   1         
 295   1         EZUSB_IRQ_CLEAR();
 296   1         USBIRQ = bmURES;         // Clear URES IRQ
 297   1      }
 298          
 299          void ISR_Susp(void) interrupt 0
 300          {
 301   1         Sleep = TRUE;
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 6   

 302   1         EZUSB_IRQ_CLEAR();
 303   1         USBIRQ = bmSUSP;
 304   1      }
 305          
 306          void ISR_Highspeed(void) interrupt 0
 307          {
 308   1         if (EZUSB_HIGHSPEED())
 309   1         {
 310   2            pConfigDscr = pHighSpeedConfigDscr;
 311   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 312   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 313   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 314   2         }
 315   1      
 316   1         EZUSB_IRQ_CLEAR();
 317   1         USBIRQ = bmHSGRANT;
 318   1      }
 319          void ISR_Ep0ack(void) interrupt 0
 320          {
 321   1      }
 322          void ISR_Stub(void) interrupt 0
 323          {
 324   1      }
 325          void ISR_Ep0in(void) interrupt 0
 326          {
 327   1      }
 328          void ISR_Ep0out(void) interrupt 0
 329          {
 330   1      }
 331          void ISR_Ep1in(void) interrupt 0
 332          {
 333   1      }
 334          void ISR_Ep1out(void) interrupt 0
 335          {
 336   1      }
 337          void ISR_Ep2inout(void) interrupt 0
 338          {
 339   1      }
 340          void ISR_Ep4inout(void) interrupt 0
 341          {
 342   1      }
 343          void ISR_Ep6inout(void) interrupt 0
 344          {
 345   1      }
 346          void ISR_Ep8inout(void) interrupt 0
 347          {
 348   1      }
 349          void ISR_Ibn(void) interrupt 0
 350          {
 351   1      }
 352          void ISR_Ep0pingnak(void) interrupt 0
 353          {
 354   1      }
 355          void ISR_Ep1pingnak(void) interrupt 0
 356          {
 357   1      }
 358          void ISR_Ep2pingnak(void) interrupt 0
 359          {
 360   1      }
 361          void ISR_Ep4pingnak(void) interrupt 0
 362          {
 363   1      }
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 7   

 364          void ISR_Ep6pingnak(void) interrupt 0
 365          {
 366   1      }
 367          void ISR_Ep8pingnak(void) interrupt 0
 368          {
 369   1      }
 370          void ISR_Errorlimit(void) interrupt 0
 371          {
 372   1      }
 373          void ISR_Ep2piderror(void) interrupt 0
 374          {
 375   1      }
 376          void ISR_Ep4piderror(void) interrupt 0
 377          {
 378   1      }
 379          void ISR_Ep6piderror(void) interrupt 0
 380          {
 381   1      }
 382          void ISR_Ep8piderror(void) interrupt 0
 383          {
 384   1      }
 385          void ISR_Ep2pflag(void) interrupt 0
 386          {
 387   1      }
 388          void ISR_Ep4pflag(void) interrupt 0
 389          {
 390   1      }
 391          void ISR_Ep6pflag(void) interrupt 0
 392          {
 393   1      }
 394          void ISR_Ep8pflag(void) interrupt 0
 395          {
 396   1      }
 397          void ISR_Ep2eflag(void) interrupt 0
 398          {
 399   1      }
 400          void ISR_Ep4eflag(void) interrupt 0
 401          {
 402   1      }
 403          void ISR_Ep6eflag(void) interrupt 0
 404          {
 405   1      }
 406          void ISR_Ep8eflag(void) interrupt 0
 407          {
 408   1      }
 409          void ISR_Ep2fflag(void) interrupt 0
 410          {
 411   1      }
 412          void ISR_Ep4fflag(void) interrupt 0
 413          {
 414   1      }
 415          void ISR_Ep6fflag(void) interrupt 0
 416          {
 417   1      }
 418          void ISR_Ep8fflag(void) interrupt 0
 419          {
 420   1      }
 421          void ISR_GpifComplete(void) interrupt 0
 422          {
 423   1      }
 424          void ISR_GpifWaveform(void) interrupt 0
 425          {
C51 COMPILER V9.01   PERIPH                                                                02/21/2011 16:00:47 PAGE 8   

 426   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    556    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
